// RUN: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x20xf32>
    %1 = call @expected() : () -> tensor<20x20xf32>
    %2 = stablehlo.constant dense<-1.000000e+00> : tensor<f32>
    %3 = stablehlo.broadcast_in_dim %2, dims = [] : (tensor<f32>) -> tensor<20x20xf32>
    %4 = stablehlo.compare  NE, %0, %3,  FLOAT : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %5 = stablehlo.multiply %0, %0 : tensor<20x20xf32>
    %6 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %7 = stablehlo.broadcast_in_dim %6, dims = [] : (tensor<f32>) -> tensor<20x20xf32>
    %8 = stablehlo.subtract %7, %5 : tensor<20x20xf32>
    %9 = stablehlo.sqrt %8 : tensor<20x20xf32>
    %10 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %11 = stablehlo.broadcast_in_dim %10, dims = [] : (tensor<f32>) -> tensor<20x20xf32>
    %12 = stablehlo.add %11, %0 : tensor<20x20xf32>
    %13 = stablehlo.atan2 %9, %12 : tensor<20x20xf32>
    %14 = stablehlo.constant dense<2.000000e+00> : tensor<f32>
    %15 = stablehlo.broadcast_in_dim %14, dims = [] : (tensor<f32>) -> tensor<20x20xf32>
    %16 = stablehlo.multiply %15, %13 : tensor<20x20xf32>
    %17 = stablehlo.constant dense<3.14159274> : tensor<f32>
    %18 = stablehlo.broadcast_in_dim %17, dims = [] : (tensor<f32>) -> tensor<20x20xf32>
    %19 = stablehlo.select %4, %16, %18 : tensor<20x20xi1>, tensor<20x20xf32>
    %20 = stablehlo.custom_call @check.eq(%19, %1) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<i1>
    return %20 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
  func.func private @expected() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
}
