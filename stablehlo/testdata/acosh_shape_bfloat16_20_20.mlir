// RUN: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x20xbf16>
    %1 = call @expected() : () -> tensor<20x20xbf16>
    %2 = stablehlo.constant dense<-1.000000e+00> : tensor<20x20xbf16>
    %3 = stablehlo.compare  LT, %0, %2 : (tensor<20x20xbf16>, tensor<20x20xbf16>) -> tensor<20x20xi1>
    %4 = stablehlo.constant dense<0x7FC0> : tensor<20x20xbf16>
    %5 = stablehlo.constant dense<3.389530e+38> : tensor<20x20xbf16>
    %6 = stablehlo.constant dense<1.837470e+19> : tensor<20x20xbf16>
    %7 = stablehlo.compare  GE, %0, %6 : (tensor<20x20xbf16>, tensor<20x20xbf16>) -> tensor<20x20xi1>
    %8 = stablehlo.log %0 : tensor<20x20xbf16>
    %9 = stablehlo.constant dense<2.000000e+00> : tensor<20x20xbf16>
    %10 = stablehlo.constant dense<6.914060e-01> : tensor<20x20xbf16>
    %11 = stablehlo.add %8, %10 : tensor<20x20xbf16>
    %12 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xbf16>
    %13 = stablehlo.add %12, %0 : tensor<20x20xbf16>
    %14 = stablehlo.constant dense<-1.000000e+00> : tensor<20x20xbf16>
    %15 = stablehlo.add %14, %0 : tensor<20x20xbf16>
    %16 = stablehlo.multiply %13, %15 : tensor<20x20xbf16>
    %17 = stablehlo.sqrt %16 : tensor<20x20xbf16>
    %18 = stablehlo.add %0, %17 : tensor<20x20xbf16>
    %19 = stablehlo.log %18 : tensor<20x20xbf16>
    %20 = stablehlo.select %7, %11, %19 : tensor<20x20xi1>, tensor<20x20xbf16>
    %21 = stablehlo.select %3, %4, %20 : tensor<20x20xi1>, tensor<20x20xbf16>
    %22 = stablehlo.custom_call @check.eq(%21, %1) : (tensor<20x20xbf16>, tensor<20x20xbf16>) -> tensor<i1>
    return %22 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x20xbf16> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xbf16>
    return %0 : tensor<20x20xbf16>
  }
  func.func private @expected() -> tensor<20x20xbf16> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xbf16>
    return %0 : tensor<20x20xbf16>
  }
}

