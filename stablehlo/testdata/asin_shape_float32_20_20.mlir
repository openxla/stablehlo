// RUN: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x20xf32>
    %1 = call @expected() : () -> tensor<20x20xf32>
    %2 = stablehlo.constant dense<2.000000e+00> : tensor<20x20xf32>
    %3 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %4 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %5 = stablehlo.multiply %0, %0 : tensor<20x20xf32>
    %6 = stablehlo.subtract %4, %5 : tensor<20x20xf32>
    %7 = stablehlo.sqrt %6 : tensor<20x20xf32>
    %8 = stablehlo.add %3, %7 : tensor<20x20xf32>
    %9 = stablehlo.atan2 %0, %8 : tensor<20x20xf32>
    %10 = stablehlo.multiply %2, %9 : tensor<20x20xf32>
    %11 = stablehlo.custom_call @check.eq(%10, %1) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<i1>
    return %11 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
  func.func private @expected() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
}

