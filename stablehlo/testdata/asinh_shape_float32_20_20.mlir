// RUN: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x20xf32>
    %1 = call @expected() : () -> tensor<20x20xf32>
    %2 = stablehlo.sign %0 : tensor<20x20xf32>
    %3 = stablehlo.abs %0 : tensor<20x20xf32>
    %4 = stablehlo.constant dense<3.40282347E+38> : tensor<20x20xf32>
    %5 = stablehlo.constant dense<1.8446743E+19> : tensor<20x20xf32>
    %6 = stablehlo.compare  GE, %3, %5 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %7 = stablehlo.abs %0 : tensor<20x20xf32>
    %8 = stablehlo.log %7 : tensor<20x20xf32>
    %9 = stablehlo.constant dense<2.000000e+00> : tensor<20x20xf32>
    %10 = stablehlo.constant dense<0.693147182> : tensor<20x20xf32>
    %11 = stablehlo.add %8, %10 : tensor<20x20xf32>
    %12 = stablehlo.abs %0 : tensor<20x20xf32>
    %13 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %14 = stablehlo.compare  LE, %12, %13 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %15 = stablehlo.abs %0 : tensor<20x20xf32>
    %16 = stablehlo.abs %0 : tensor<20x20xf32>
    %17 = stablehlo.abs %0 : tensor<20x20xf32>
    %18 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %19 = stablehlo.abs %0 : tensor<20x20xf32>
    %20 = stablehlo.abs %0 : tensor<20x20xf32>
    %21 = stablehlo.multiply %19, %20 : tensor<20x20xf32>
    %22 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %23 = stablehlo.add %21, %22 : tensor<20x20xf32>
    %24 = stablehlo.sqrt %23 : tensor<20x20xf32>
    %25 = stablehlo.add %18, %24 : tensor<20x20xf32>
    %26 = stablehlo.divide %17, %25 : tensor<20x20xf32>
    %27 = stablehlo.multiply %16, %26 : tensor<20x20xf32>
    %28 = stablehlo.add %15, %27 : tensor<20x20xf32>
    %29 = stablehlo.log_plus_one %28 : tensor<20x20xf32>
    %30 = stablehlo.abs %0 : tensor<20x20xf32>
    %31 = stablehlo.abs %0 : tensor<20x20xf32>
    %32 = stablehlo.abs %0 : tensor<20x20xf32>
    %33 = stablehlo.multiply %31, %32 : tensor<20x20xf32>
    %34 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %35 = stablehlo.add %33, %34 : tensor<20x20xf32>
    %36 = stablehlo.sqrt %35 : tensor<20x20xf32>
    %37 = stablehlo.add %30, %36 : tensor<20x20xf32>
    %38 = stablehlo.log %37 : tensor<20x20xf32>
    %39 = stablehlo.select %14, %29, %38 : tensor<20x20xi1>, tensor<20x20xf32>
    %40 = stablehlo.select %6, %11, %39 : tensor<20x20xi1>, tensor<20x20xf32>
    %41 = stablehlo.multiply %2, %40 : tensor<20x20xf32>
    %42 = stablehlo.custom_call @check.eq(%41, %1) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<i1>
    return %42 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0x60BF333F5E1D5540C4671BC12B893C40CA7148BE4383B03E22AE80C061587B3D5AD959C0E87C0BC094B81C3E712A0ABF315AF2BF87E7ABBF5890B5BFC147FFBF3AC60240CD520EC0F5753DC0ACE49640894CA4BF2293FA40821892C00FAF9ABE33EF734077EE04413F334B4035EE8D3E2B781AC0AC13593F2CB72E403B0F0DBFD7282AC082EC004044D7C3C06C74BCBFC3E72D40F08CF23F32E2FFBFD341C8BFB06C54C02736B83F0064CCBF172C15C029B81B3F151C24C0044B674028792F3EA62C94BFC0FA8FBF232450C05A5335C18E26CA3F8D06333D2157EA3F020FE4BF1E948B40DD0514C19CB8A6BFC4C9654066E589BF439517BE69D114C0AB61B6C053EA7740943480BFBA4D9FC08D9E90C0ADA91B409902893E344A863F2A0540BF549345BF1FB69E40D5EC1AC05D0BC7409B04DABFDB5C03BEA307F63F55F9B83FB7042CC04D29643F15A08FBF9B36B6403B57AEC05E930B4028E6833FB95EA63D8726AA3E3607BCBF8107AA402B7BCC3DA87C1EC05EB4173EFD333EC0E0670BC0D8A6D73E4C4B903F895650C0CBFDCBBD55C0A73F6018E53E319D5F3EBC169F40A00021BF5A585D403DFB24C0A19E803E1BF055BF7869D9C00382FB3F66FB10BF611FA9C03178CFC0BB53653E06A4D63D6E9728C026A63CC0834F2A3FA8CC6DBF18B800C0728458C0CE188140098FADBF155803C05ACAB8BE1D386D40AF1B7B40E7A4AC3F5676954024D63540FEE4A9C01DAF413F8A59C8BF791AA9BF3EDA2E401F7EDD3F4006363F9A3084C04067DB3FCF6CA040853B0A400DC712BF94E24F3BB076DC40C7D7DF3F1ED28CBFF69502BF025BD53E92545240D356643E1663D0400115973D713997BF02A4E9BE8D40ABC044932E406FCF0AC0264FD9BDF996EEC0B0B2EEBF5222FEC01E70A13EA54633C0E3C7483F64430B3FF87C14C05C6F9540050208C0FC6F91BF1D1713BD9748323F3E435440ACB389BF9E3C8B3FE4319BBEF09F0F3F81C13BC0EF2354BFB66689C04249F13F709EC740CD6682C038C88E3FB87FF03F2C7725404C413DC0A822AA40EC6CBFBFEC058AC0DE42BCC029573B3F2A758DC0BDE417C01BBDDEBFE311A93F0C8C2C3F46D528C064FC20BEA0252440C80653C0CCC4ECBDB47A9240333A99BFCA9125C0F51494C0D132224020C952BF127328BFDA9C9F3F3496274042139AC0107F9BC031D0A54052AE6B3F49EF7BBF1C478E4020B8813F12B0B94029E19A40B482BC4017F812C04C1187BE507447C085C1EB3FC0F0814075F5943FB9C97C40E879D13EAA57E4BF0237993F173742C0876FD4BF085A083E46E35E407061894025E1AB3E6DC9B5BFE60A46BF6F86D5BF482C82BE2A6664C0A2A332408D3DB53E779C44C062BA0AC0A27D293F3EA03DBF228F38C021587ABF34EA5E3F54CC2540ADF32FC0241097BFA84956BFE44CB54082BBE7C0DA26C2BF512BC140BDF6D3BF304F443F799C4D40668A07C0888552BF93DE8740F2651B402F2946BF5E7A873FB04360C0228A863ED0FBBA3FD9FA913F1E333340FC038F40B5B29AC06D06B840EA4E23C0D99190C0D426F53FFD74043FE87A65C043F1EE3FA2D323C0504C1240AFF8FEBF976F8DC09FE6A840B0BEFDBE9CFBF13F13EA83C0DCB7A6BF3E26B83E67EF14BFBF1685404D4CA34097E8A03F39D6533F2D0266BFAD3323C0ED4D49C075E846400B05354035A232C0CE477FC0390BBABF36AE154021AD3AC07C3B8F406EC797BF6A696BBF2BC6BD3DC84F7BC027BD0E40C058943E5962E3BE0D4909C0FECB66BE05E88BC0BEA899400B92674001BA7EC0EFDA00C03CA146BD90EC8140AD86E53F5D7210409002A340C37B1140E698ACC010CC5CBFA965614048B7D83FE3842040958E51409D29E93ED49E50409CA7114074ED60C0A777EAC0853ED93F284A40C080DAC84030C4853E46E3F6BFEF9222BF0FE5A93FBC8F9E3F8B7C9EC08FD8A0BFE20DEB3F7D5DD5C01350423E57A4B74028DBFCC0711C54C0E14C7740968F7E3E9AF99C3FFA2437BE82D010C04C24823E18A5C13EFA70DBBF5BDF6FBE13019F403FC561400ADE723F586EC1BE89D6E83FB2525DC0CB751E4026DD8EBFD6ED153F204646406A0F5AC0BB824740E97E7BBE6AF12240460F02BFA58E64403D8C9440CA7BF03FA3728E3F5C9C70C09C9B76C085FF77C04EA71640FEF38E3F8128F9BFE4C17B3F8C4CB53F262CBEBFF4CD4440D3EA5FC01273E33F6913C5BFA1D50D40B450FE3F5AC8ADBFE7FB8DBF"> : tensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
  func.func private @expected() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xEF87273F387EF53FF1073EC05F8DE63F9E2F47BEE430AD3E076406C011307B3D6330F8BFDAB4C2BF941D1C3EB83504BF678CB2BF015D8DBF990793BF8F76B8BFD73EBB3F3E0DC5BF4425E7BF9E52104070C188BF8B553040204D0EC0246C98BE851103407D1834402DAAEF3F412C8C3EDBACCEBFB809453FDE5CDD3F15C006BF2B31DABFFA9BB93F83B920C054F396BFE4CDDC3F18A4B23FB7BBB8BF5A719DBF7018F5BF418C943F1AA79FBF438FCABFE76E133F66DDD5BF668FFF3F2AA02E3EBE117DBF408A77BFDD99F2BFDADB47C08A759E3FF9F7323DF2C1AE3F04B7ABBF8D730B40F0EE3AC0C73C8ABF4BC1FE3F225C6FBFEB0817BEAE47CABF533B1CC03212044006EC61BFEBB813C09AAA0DC0F795CF3FEF6C873E226B6A3F3A7631BFFDE135BF197D13400D06CFBFECBF21407FB7A6BF4C0103BE7C41B43F7AFB943FA17EDBBFFF664D3FAE1177BF6F2C1C40346419C094C7C23F9C1A673F0430A63D2B2AA73EECB596BFD8D017409524CC3D94B7D1BFB027173EAF9EE7BF4EA3C2BF8BBCD13E36F5773F7AB7F2BFD3A7CBBD11DD8A3F2711DE3EB6DF5D3E3EA3134014ED17BF3E25FA3F307FD6BF969B7E3EFBA242BF3E5527C01EC3B63FB72C0ABFC27A17C0E05E24C0BE73633EED3FD63D6615D9BFFF9FE6BFA4BD1F3FD08754BF566DB9BFA96FF7BF6F97064027598EBFD9BEBBBF39FFB4BE8B57014047DD0440F2CD8D3FECB90F40E22CE23F13C417C070CA323F1F7E9DBF81AE8BBFFC74DD3F3577A83FF763293F331008C0A26AA73F9D291440CCA7C13F14BC0BBF7DE24F3B363728400FA3A93F175173BF27FFFABE5D9ECF3EB8E1F33FED7C623E55A6244002F2963D4A8480BF8935E2BE3E4418C02944DD3FE023C2BF49E7D8BD53392DC0E9D4B0BFCC3A31C040E09E3EE276E0BF9E69383FBD2C053FE604CABF00B70F400FC6BFBFD07879BF070F13BDCB54263F8400F53F71186FBFEA2D713F5DE998BE08FE083FC60CE6BF444141BF91780AC0B70CB23F8CEE2140633707C0F8F1753F26AEB13FB8D8D63F8A03E7BFE3DA1740559C98BFA2C00AC0993B1EC0A7B32D3F2E490CC06AB0CCBF7A16A9BF53A98B3F5D99213F4541D9BF7C5420BE56E4D53F5149F4BF953EECBD17770E404ACE81BFEAEBD6BF4D250FC01078D43FE23540BF4C301EBF8CD9853F575ED83F3BA111C08A3412C0BD3C1640A4F9523FE0BE5EBF92A50C400C0E643F535D1D40C4F41140FA501E40B8CFC8BF4F8C85BE2465EDBF436FAF3F07FF0640E2177E3F274705406F08CC3E8FDAABBF3FCC813FAA27EABF00DDA3BFB2F3073EEEFFFA3F2C760A40FDCDA83E792893BF9C4036BFAC6CA4BF53CF80BEF001FEBF1909E03F75A7B13E7CA5EBBF3E12C2BFC50E1F3FCD8A2FBFA1F8E3BF389C5DBF3877493F1A16D73FEC35DEBF9A6980BFACE742BF62DB1B40E65F2BC0611E9ABF72DB1F409C9EA3BF14E1343F091BF13F0E60BFBFB00140BFBAC509406B62CF3F8F5836BFE00D6C3FE6C1FBBF9909853E291F963F1C307A3FC069E03F42F80C40F4E111C01FCC1C40FF47D5BF1CA50DC095D9B33F5053FE3EF396FEBF77F2B03FB7A8D5BF4A46C83F1953B8BFB8460CC0A4651740965CF4BE3460B23FFBEE07C0523C8ABFD464B43E629A0DBF277C0840EA46154093A8863F6805413F61C74EBF1D34D5BF5885EEBF940FED3FC3A1E13F2208E0BF0AE305C0069795BFB8F5CA3FF959E5BF79100D40EDDF80BFEEC652BFE980BD3D23EA04C05F64C53F8558923E1481DCBE7ADBC0BFDBE264BE02990BC0DB75114043B5FF3F85C005C0598CB9BF538D46BD06FD0640706EAC3F59C8C63F872A1540BA9EC73F44C218C084DD47BFAD60FC3F5C0EA63F093BD33F406EF33F2CC6E13EE8E1F23F06C2C73FF21EFCBF591E2CC01353A63FB8F1E8BF4D5222401E4A843EB7A6B4BF2C4119BF97288C3FD830853F526613C0989E86BF7319AF3FC02426C0472A413E7AAA1C40D9E830C01CEAF4BFCBEA034060027C3EF630843F8C2E36BE8B14C7BF96C7803E684DBD3E896FA7BF2FBB6DBEB39A1340DB94FC3FB239583F2E1ABDBE2109AE3F1922FABF70B2D13FE80D76BF20760E3FFDABEC3FD94EF8BFF46DED3F9C0879BEB303D53F160FFABEC617FE3F9E570F404DACB13FA47F753F353802C052BE03C07E1704C00CB9CB3F632C763F46B1B5BF839E5E3F84E0923FA0E997BF1BC4EB3F1891FBBF9E6AAB3F40B89BBF6CA6C43FA807B83F287B8EBFC6E074BF"> : tensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
}

