// RUN: diff <(stablehlo-opt %s.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-opt %s --stablehlo-legalize-to-vhlo --vhlo-to-version=target=current -emit-bytecode | stablehlo-opt --vhlo-legalize-to-stablehlo) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x20xf32>
    %1 = call @expected() : () -> tensor<20x20xf32>
    %2 = stablehlo.abs %0 : tensor<20x20xf32>
    %3 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %4 = stablehlo.compare  GT, %2, %3 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %5 = stablehlo.constant dense<0x7FC00000> : tensor<20x20xf32>
    %6 = stablehlo.log_plus_one %0 : tensor<20x20xf32>
    %7 = stablehlo.negate %0 : tensor<20x20xf32>
    %8 = stablehlo.log_plus_one %7 : tensor<20x20xf32>
    %9 = stablehlo.subtract %6, %8 : tensor<20x20xf32>
    %10 = stablehlo.constant dense<5.000000e-01> : tensor<20x20xf32>
    %11 = stablehlo.multiply %9, %10 : tensor<20x20xf32>
    %12 = stablehlo.select %4, %5, %11 : tensor<20x20xi1>, tensor<20x20xf32>
    %13 = stablehlo.custom_call @check.eq(%12, %1) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<i1>
    return %13 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xF0F71540C249A73C001CB740D425F13F1B9504C0437A91C056D39C3D991910C06BA8D6BF83613FC0E6BA8E3E07FE85405749A73F9C3B3E406C181C40E393363F77D366C09746EF3F5817243E820AB4BF3C4D46C07ECDFBBC8589234031C89E3FAFC6553F70B12F4006EC8F3F9CE6473FA2BD8CC0028B4240F51A55C05F7B09BFF14C6D403837D23FC82E4EC0533FDCBEAEDBE03F39DFDE3F8183943EB99593C03E1388C0FE848CC0384F2DC083B99A40AE1C20C0DD0251C01F0E42401E88C7BF4F31D63E7DEA91BF6837413FD0E4853F9B2E11C05C51644035E908404F99A140124B2E4046C1184072A083C08925A13E46014EC058AD31C0A89D343EFA22DFBE50A61E4019C5033F4601873CFCC0A54024DBA1BFF6C9584089F9BA3FECE639C0C7A99D40685F853F540A8FC03AB9AC3F98F873C0F9529A3F2DA594C022CA8840D4A888BE61E20ABFD5003F40AA1621BFC58CACBFF071933F0603C240114C713FE60F963FB809F3BFC79462C04D9D9B40B35C3A3FC14955BF8CC8F93F5D74AD408C8E123F39024B40027451401CCC32C0FBF31540B7E0B8C0D1249B40230E51C0093B07400C8890C0101833C0399584408FC9A2C01599AABFD0219B3E2B4DEC3F87ACA8BFDCCD8240EEEE8440898EB0BEB60C03BFC552A0BEECC896C0CD7A703F1A04A2BE0CF461C0F2F2DEC019AE9140B6340E3F0C0C4FC0535678C0BCAD48C0ADA6293E1C5ED1BED728BA3F5324964019A4243FE57051C01A89EDBF7B16BAC07484F6BF1F9E4F3F9C56BBC01BBECABFB011253F7448513FFE6B0CBF8361DD3F3431B6BF762A28C169470140F2681CC1986B8440F5884FC03907AFC0B7873B4042DE8E4093E0C4BFCE05B1BFA4AB16407E2EEEBF06A21FBF0C296DBEF53B4CC0A3CD1640B11F87C054C6B63F4B34BE40963FBBBE72594CC01EC562BFFE22CBBF13FD9FC0D446B43EDBFB28C0B9941C406EA72840AB7E87BF53AF57406D030441CDCF26C0D2BE2ABE6EC0463F6A8A9ABE352388BF67950E3F9715A0BFFB21BE40235B1CC04E4AAC405E60E1C0636325C0C11107C02B31773F980F4F405D17AAC0F7D1A33F3053C7401DA50DBDD595F440AA06FE3F1A298B40FDAFE03FE3DD0540790D0F40B31417BFBA272E40F32783BF0CF8C73FE6433A4037913BBE9D856BBFD2293540FECF86C0AD1EC63F429B403D1B5920BF12151340AC8928BD5112AF3FD44C7240F434393FC315EE3F7E6C1340CA7E99BE064E07C0B6DB29BFD123C23F4A72E53FE9E9F8BEC0D62A3F4A0E2DBFD88316C078E06840A888C5BF30D1E1BF9F7714C02585503FB2F016C0ADF05DBF44D22EC0282B6F3F8D126A40F3660CBF85B5A23E9F0973BD875E0AC08213D4BF6316FF40E460813E6A468DC020F848BFA9683DC09E682240E830CE40249DD9BF590C6B3F323B84C0A76B01BF53C313C0EDADD5BFA83579BFDC261CC097816F3F0A92BEBFFBD12E40D2079DBF6F3384C0BF9D04C03BA0C3C0C95F88405511B74051CB80C01E63A3BEB37743401441AE3EA1086DBFCF383D40B21239404A23F83F9D1A1D3E1ECE48C01E9ED43FBCBF1140591A8C3FA668244012835C4052663A4023D3D8BF07E7A840537F84BF3153463E99EE803F74519F4014B433C005BB8C40862165C08B07FE3FEF9992BF50BAA4C033367140270F314048AA57407AA933C03C46D1BF149F72C0A10573C0005C0ABFF616C0BFEE115A40C5C8CA3F885DA540A3BAFEBF3E87A9409C07233F89BA4C40E5982B3FED8E3140F973863FA878DDBFD552383F5EA42C40C4FE0D40E30E7AC09A2F29402CBF59C07444FA3EB552AA3FD0747ABFE258DFBFCE5B7D3F41919CBF57BEBA401D935040FFA21A3D0BE6164015190240F6923DC0093FADBF45E2293F29D809C0D1BBB3BFDCE087C08FE9DB3F9F45773F9F7B81BE3284BFBF76122DBE8F4799C0EFC7173F507AAC3F786BF7BF5D079CC025C202BFC850FBBE55CB7C40EE4D40C03B4B833F5D6461BFF48A983FBC5E89401DE476C07400CA3E681909C0B58432C06C91E53FE65FC4BF5E66A4BDC1DF83408F0532404BA089BFD99AC44053F62340F1A71F3F37237EBF1CCF80BF4A9BA23FE1B8813F3359853F5BC72840503A05C0124166C0085F1A405530AAC097D1433F1EF120C00A8448C0096FED3FD1454B40D14E04C090A5B740F50380BF158199C0F9B04DBFACB8A43F8471E340EFFF5A40BF743DC057E645BF1646773FBE3439BFB70B1F40E2C0324013BBFA3E"> : tensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
  func.func private @expected() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
}

