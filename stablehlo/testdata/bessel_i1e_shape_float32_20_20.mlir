// RUN: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x20xf32>
    %1 = call @expected() : () -> tensor<20x20xf32>
    %2 = stablehlo.abs %0 : tensor<20x20xf32>
    %3 = stablehlo.constant dense<5.000000e-01> : tensor<20x20xf32>
    %4 = stablehlo.constant dense<2.000000e+00> : tensor<20x20xf32>
    %5 = stablehlo.constant dense<3.200000e+01> : tensor<20x20xf32>
    %6 = stablehlo.constant dense<8.000000e+00> : tensor<20x20xf32>
    %7 = stablehlo.multiply %3, %2 : tensor<20x20xf32>
    %8 = stablehlo.subtract %7, %4 : tensor<20x20xf32>
    %9 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %10 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %11 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %12 = stablehlo.multiply %8, %9 : tensor<20x20xf32>
    %13 = stablehlo.subtract %12, %10 : tensor<20x20xf32>
    %14 = stablehlo.constant dense<9.38153732E-9> : tensor<20x20xf32>
    %15 = stablehlo.add %13, %14 : tensor<20x20xf32>
    %16 = stablehlo.multiply %8, %15 : tensor<20x20xf32>
    %17 = stablehlo.subtract %16, %9 : tensor<20x20xf32>
    %18 = stablehlo.constant dense<-4.44505908E-8> : tensor<20x20xf32>
    %19 = stablehlo.add %17, %18 : tensor<20x20xf32>
    %20 = stablehlo.multiply %8, %19 : tensor<20x20xf32>
    %21 = stablehlo.subtract %20, %15 : tensor<20x20xf32>
    %22 = stablehlo.constant dense<2.00329481E-7> : tensor<20x20xf32>
    %23 = stablehlo.add %21, %22 : tensor<20x20xf32>
    %24 = stablehlo.multiply %8, %23 : tensor<20x20xf32>
    %25 = stablehlo.subtract %24, %19 : tensor<20x20xf32>
    %26 = stablehlo.constant dense<-8.568720e-07> : tensor<20x20xf32>
    %27 = stablehlo.add %25, %26 : tensor<20x20xf32>
    %28 = stablehlo.multiply %8, %27 : tensor<20x20xf32>
    %29 = stablehlo.subtract %28, %23 : tensor<20x20xf32>
    %30 = stablehlo.constant dense<3.47025139E-6> : tensor<20x20xf32>
    %31 = stablehlo.add %29, %30 : tensor<20x20xf32>
    %32 = stablehlo.multiply %8, %31 : tensor<20x20xf32>
    %33 = stablehlo.subtract %32, %27 : tensor<20x20xf32>
    %34 = stablehlo.constant dense<-1.32731639E-5> : tensor<20x20xf32>
    %35 = stablehlo.add %33, %34 : tensor<20x20xf32>
    %36 = stablehlo.multiply %8, %35 : tensor<20x20xf32>
    %37 = stablehlo.subtract %36, %31 : tensor<20x20xf32>
    %38 = stablehlo.constant dense<4.78156508E-5> : tensor<20x20xf32>
    %39 = stablehlo.add %37, %38 : tensor<20x20xf32>
    %40 = stablehlo.multiply %8, %39 : tensor<20x20xf32>
    %41 = stablehlo.subtract %40, %35 : tensor<20x20xf32>
    %42 = stablehlo.constant dense<-1.61760821E-4> : tensor<20x20xf32>
    %43 = stablehlo.add %41, %42 : tensor<20x20xf32>
    %44 = stablehlo.multiply %8, %43 : tensor<20x20xf32>
    %45 = stablehlo.subtract %44, %39 : tensor<20x20xf32>
    %46 = stablehlo.constant dense<5.122860e-04> : tensor<20x20xf32>
    %47 = stablehlo.add %45, %46 : tensor<20x20xf32>
    %48 = stablehlo.multiply %8, %47 : tensor<20x20xf32>
    %49 = stablehlo.subtract %48, %43 : tensor<20x20xf32>
    %50 = stablehlo.constant dense<-0.00151357241> : tensor<20x20xf32>
    %51 = stablehlo.add %49, %50 : tensor<20x20xf32>
    %52 = stablehlo.multiply %8, %51 : tensor<20x20xf32>
    %53 = stablehlo.subtract %52, %47 : tensor<20x20xf32>
    %54 = stablehlo.constant dense<0.0041564228> : tensor<20x20xf32>
    %55 = stablehlo.add %53, %54 : tensor<20x20xf32>
    %56 = stablehlo.multiply %8, %55 : tensor<20x20xf32>
    %57 = stablehlo.subtract %56, %51 : tensor<20x20xf32>
    %58 = stablehlo.constant dense<-0.0105640851> : tensor<20x20xf32>
    %59 = stablehlo.add %57, %58 : tensor<20x20xf32>
    %60 = stablehlo.multiply %8, %59 : tensor<20x20xf32>
    %61 = stablehlo.subtract %60, %55 : tensor<20x20xf32>
    %62 = stablehlo.constant dense<0.0247264486> : tensor<20x20xf32>
    %63 = stablehlo.add %61, %62 : tensor<20x20xf32>
    %64 = stablehlo.multiply %8, %63 : tensor<20x20xf32>
    %65 = stablehlo.subtract %64, %59 : tensor<20x20xf32>
    %66 = stablehlo.constant dense<-0.0529459827> : tensor<20x20xf32>
    %67 = stablehlo.add %65, %66 : tensor<20x20xf32>
    %68 = stablehlo.multiply %8, %67 : tensor<20x20xf32>
    %69 = stablehlo.subtract %68, %63 : tensor<20x20xf32>
    %70 = stablehlo.constant dense<0.102643661> : tensor<20x20xf32>
    %71 = stablehlo.add %69, %70 : tensor<20x20xf32>
    %72 = stablehlo.multiply %8, %71 : tensor<20x20xf32>
    %73 = stablehlo.subtract %72, %67 : tensor<20x20xf32>
    %74 = stablehlo.constant dense<-0.176416516> : tensor<20x20xf32>
    %75 = stablehlo.add %73, %74 : tensor<20x20xf32>
    %76 = stablehlo.multiply %8, %75 : tensor<20x20xf32>
    %77 = stablehlo.subtract %76, %71 : tensor<20x20xf32>
    %78 = stablehlo.constant dense<0.252587199> : tensor<20x20xf32>
    %79 = stablehlo.add %77, %78 : tensor<20x20xf32>
    %80 = stablehlo.subtract %79, %71 : tensor<20x20xf32>
    %81 = stablehlo.constant dense<5.000000e-01> : tensor<20x20xf32>
    %82 = stablehlo.multiply %80, %81 : tensor<20x20xf32>
    %83 = stablehlo.multiply %2, %82 : tensor<20x20xf32>
    %84 = stablehlo.divide %5, %2 : tensor<20x20xf32>
    %85 = stablehlo.subtract %84, %4 : tensor<20x20xf32>
    %86 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %87 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %88 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %89 = stablehlo.multiply %85, %86 : tensor<20x20xf32>
    %90 = stablehlo.subtract %89, %87 : tensor<20x20xf32>
    %91 = stablehlo.constant dense<-3.83538046E-9> : tensor<20x20xf32>
    %92 = stablehlo.add %90, %91 : tensor<20x20xf32>
    %93 = stablehlo.multiply %85, %92 : tensor<20x20xf32>
    %94 = stablehlo.subtract %93, %86 : tensor<20x20xf32>
    %95 = stablehlo.constant dense<-2.63146891E-8> : tensor<20x20xf32>
    %96 = stablehlo.add %94, %95 : tensor<20x20xf32>
    %97 = stablehlo.multiply %85, %96 : tensor<20x20xf32>
    %98 = stablehlo.subtract %97, %92 : tensor<20x20xf32>
    %99 = stablehlo.constant dense<-2.51223611E-7> : tensor<20x20xf32>
    %100 = stablehlo.add %98, %99 : tensor<20x20xf32>
    %101 = stablehlo.multiply %85, %100 : tensor<20x20xf32>
    %102 = stablehlo.subtract %101, %96 : tensor<20x20xf32>
    %103 = stablehlo.constant dense<-3.88256467E-6> : tensor<20x20xf32>
    %104 = stablehlo.add %102, %103 : tensor<20x20xf32>
    %105 = stablehlo.multiply %85, %104 : tensor<20x20xf32>
    %106 = stablehlo.subtract %105, %100 : tensor<20x20xf32>
    %107 = stablehlo.constant dense<-1.10588939E-4> : tensor<20x20xf32>
    %108 = stablehlo.add %106, %107 : tensor<20x20xf32>
    %109 = stablehlo.multiply %85, %108 : tensor<20x20xf32>
    %110 = stablehlo.subtract %109, %104 : tensor<20x20xf32>
    %111 = stablehlo.constant dense<-0.00976109784> : tensor<20x20xf32>
    %112 = stablehlo.add %110, %111 : tensor<20x20xf32>
    %113 = stablehlo.multiply %85, %112 : tensor<20x20xf32>
    %114 = stablehlo.subtract %113, %108 : tensor<20x20xf32>
    %115 = stablehlo.constant dense<0.778576254> : tensor<20x20xf32>
    %116 = stablehlo.add %114, %115 : tensor<20x20xf32>
    %117 = stablehlo.subtract %116, %108 : tensor<20x20xf32>
    %118 = stablehlo.constant dense<5.000000e-01> : tensor<20x20xf32>
    %119 = stablehlo.multiply %117, %118 : tensor<20x20xf32>
    %120 = stablehlo.sqrt %2 : tensor<20x20xf32>
    %121 = stablehlo.divide %119, %120 : tensor<20x20xf32>
    %122 = stablehlo.compare  LE, %2, %6 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %123 = stablehlo.select %122, %83, %121 : tensor<20x20xi1>, tensor<20x20xf32>
    %124 = stablehlo.sign %0 : tensor<20x20xf32>
    %125 = stablehlo.multiply %124, %123 : tensor<20x20xf32>
    %126 = stablehlo.custom_call @check.eq(%125, %1) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<i1>
    return %126 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
  func.func private @expected() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
}

