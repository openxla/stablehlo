// RUN: stablehlo-opt -inline %s | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x20xf32>
    %1 = call @expected() : () -> tensor<20x20xf32>
    %2 = stablehlo.constant dense<5.000000e-01> : tensor<20x20xf32>
    %3 = stablehlo.compare  LT, %0, %2 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %4 = stablehlo.negate %0 : tensor<20x20xf32>
    %5 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %6 = stablehlo.subtract %0, %5 : tensor<20x20xf32>
    %7 = stablehlo.select %3, %4, %6 : tensor<20x20xi1>, tensor<20x20xf32>
    %8 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %9 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %10 = stablehlo.constant dense<676.520386> : tensor<20x20xf32>
    %11 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %12 = stablehlo.add %7, %11 : tensor<20x20xf32>
    %13 = stablehlo.multiply %12, %12 : tensor<20x20xf32>
    %14 = stablehlo.divide %10, %13 : tensor<20x20xf32>
    %15 = stablehlo.subtract %8, %14 : tensor<20x20xf32>
    %16 = stablehlo.divide %10, %12 : tensor<20x20xf32>
    %17 = stablehlo.add %9, %16 : tensor<20x20xf32>
    %18 = stablehlo.constant dense<-1259.13916> : tensor<20x20xf32>
    %19 = stablehlo.constant dense<2.000000e+00> : tensor<20x20xf32>
    %20 = stablehlo.add %7, %19 : tensor<20x20xf32>
    %21 = stablehlo.multiply %20, %20 : tensor<20x20xf32>
    %22 = stablehlo.divide %18, %21 : tensor<20x20xf32>
    %23 = stablehlo.subtract %15, %22 : tensor<20x20xf32>
    %24 = stablehlo.divide %18, %20 : tensor<20x20xf32>
    %25 = stablehlo.add %17, %24 : tensor<20x20xf32>
    %26 = stablehlo.constant dense<771.323425> : tensor<20x20xf32>
    %27 = stablehlo.constant dense<3.000000e+00> : tensor<20x20xf32>
    %28 = stablehlo.add %7, %27 : tensor<20x20xf32>
    %29 = stablehlo.multiply %28, %28 : tensor<20x20xf32>
    %30 = stablehlo.divide %26, %29 : tensor<20x20xf32>
    %31 = stablehlo.subtract %23, %30 : tensor<20x20xf32>
    %32 = stablehlo.divide %26, %28 : tensor<20x20xf32>
    %33 = stablehlo.add %25, %32 : tensor<20x20xf32>
    %34 = stablehlo.constant dense<-176.615036> : tensor<20x20xf32>
    %35 = stablehlo.constant dense<4.000000e+00> : tensor<20x20xf32>
    %36 = stablehlo.add %7, %35 : tensor<20x20xf32>
    %37 = stablehlo.multiply %36, %36 : tensor<20x20xf32>
    %38 = stablehlo.divide %34, %37 : tensor<20x20xf32>
    %39 = stablehlo.subtract %31, %38 : tensor<20x20xf32>
    %40 = stablehlo.divide %34, %36 : tensor<20x20xf32>
    %41 = stablehlo.add %33, %40 : tensor<20x20xf32>
    %42 = stablehlo.constant dense<12.5073433> : tensor<20x20xf32>
    %43 = stablehlo.constant dense<5.000000e+00> : tensor<20x20xf32>
    %44 = stablehlo.add %7, %43 : tensor<20x20xf32>
    %45 = stablehlo.multiply %44, %44 : tensor<20x20xf32>
    %46 = stablehlo.divide %42, %45 : tensor<20x20xf32>
    %47 = stablehlo.subtract %39, %46 : tensor<20x20xf32>
    %48 = stablehlo.divide %42, %44 : tensor<20x20xf32>
    %49 = stablehlo.add %41, %48 : tensor<20x20xf32>
    %50 = stablehlo.constant dense<-0.138571098> : tensor<20x20xf32>
    %51 = stablehlo.constant dense<6.000000e+00> : tensor<20x20xf32>
    %52 = stablehlo.add %7, %51 : tensor<20x20xf32>
    %53 = stablehlo.multiply %52, %52 : tensor<20x20xf32>
    %54 = stablehlo.divide %50, %53 : tensor<20x20xf32>
    %55 = stablehlo.subtract %47, %54 : tensor<20x20xf32>
    %56 = stablehlo.divide %50, %52 : tensor<20x20xf32>
    %57 = stablehlo.add %49, %56 : tensor<20x20xf32>
    %58 = stablehlo.constant dense<9.98436917E-6> : tensor<20x20xf32>
    %59 = stablehlo.constant dense<7.000000e+00> : tensor<20x20xf32>
    %60 = stablehlo.add %7, %59 : tensor<20x20xf32>
    %61 = stablehlo.multiply %60, %60 : tensor<20x20xf32>
    %62 = stablehlo.divide %58, %61 : tensor<20x20xf32>
    %63 = stablehlo.subtract %55, %62 : tensor<20x20xf32>
    %64 = stablehlo.divide %58, %60 : tensor<20x20xf32>
    %65 = stablehlo.add %57, %64 : tensor<20x20xf32>
    %66 = stablehlo.constant dense<1.50563267E-7> : tensor<20x20xf32>
    %67 = stablehlo.constant dense<8.000000e+00> : tensor<20x20xf32>
    %68 = stablehlo.add %7, %67 : tensor<20x20xf32>
    %69 = stablehlo.multiply %68, %68 : tensor<20x20xf32>
    %70 = stablehlo.divide %66, %69 : tensor<20x20xf32>
    %71 = stablehlo.subtract %63, %70 : tensor<20x20xf32>
    %72 = stablehlo.divide %66, %68 : tensor<20x20xf32>
    %73 = stablehlo.add %65, %72 : tensor<20x20xf32>
    %74 = stablehlo.constant dense<7.500000e+00> : tensor<20x20xf32>
    %75 = stablehlo.add %74, %7 : tensor<20x20xf32>
    %76 = stablehlo.constant dense<2.01490307> : tensor<20x20xf32>
    %77 = stablehlo.divide %7, %74 : tensor<20x20xf32>
    %78 = stablehlo.log_plus_one %77 : tensor<20x20xf32>
    %79 = stablehlo.add %76, %78 : tensor<20x20xf32>
    %80 = stablehlo.divide %71, %73 : tensor<20x20xf32>
    %81 = stablehlo.constant dense<7.000000e+00> : tensor<20x20xf32>
    %82 = stablehlo.divide %81, %75 : tensor<20x20xf32>
    %83 = stablehlo.add %79, %80 : tensor<20x20xf32>
    %84 = stablehlo.subtract %83, %82 : tensor<20x20xf32>
    %85 = stablehlo.constant dense<5.000000e-01> : tensor<20x20xf32>
    %86 = stablehlo.add %0, %85 : tensor<20x20xf32>
    %87 = stablehlo.floor %86 : tensor<20x20xf32>
    %88 = stablehlo.abs %87 : tensor<20x20xf32>
    %89 = stablehlo.add %0, %88 : tensor<20x20xf32>
    %90 = stablehlo.constant dense<3.14159274> : tensor<20x20xf32>
    %91 = stablehlo.multiply %90, %89 : tensor<20x20xf32>
    %92 = stablehlo.cosine %91 : tensor<20x20xf32>
    %93 = stablehlo.sine %91 : tensor<20x20xf32>
    %94 = stablehlo.multiply %90, %92 : tensor<20x20xf32>
    %95 = stablehlo.divide %94, %93 : tensor<20x20xf32>
    %96 = stablehlo.subtract %84, %95 : tensor<20x20xf32>
    %97 = stablehlo.select %3, %96, %84 : tensor<20x20xi1>, tensor<20x20xf32>
    %98 = stablehlo.compare  LE, %0, %8 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %99 = stablehlo.floor %0 : tensor<20x20xf32>
    %100 = stablehlo.compare  EQ, %0, %99 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %101 = stablehlo.and %98, %100 : tensor<20x20xi1>
    %102 = stablehlo.constant dense<0x7FC00000> : tensor<20x20xf32>
    %103 = stablehlo.select %101, %102, %97 : tensor<20x20xi1>, tensor<20x20xf32>
    %104 = stablehlo.custom_call @check.eq(%103, %1) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<i1>
    return %104 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
  func.func private @expected() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
}

