module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x20xf32>
    %1 = call @expected() : () -> tensor<20x20xf32>
    %2 = call @erf_inv(%0) : (tensor<20x20xf32>) -> tensor<20x20xf32>
    %3 = stablehlo.custom_call @check.eq(%2, %1) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<i1>
    return %3 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
  func.func private @expected() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xFFFFFF7FFFFFFF7F52FC3F3FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F6F7E39BFFFFFFF7FFFFFFF7FFFFFFF7FF71633BFFFFFFF7FFFFFFF7FD100923E9DA7D1BE960A833FFFFFFF7FF664D23FFFFFFF7FFFFFFF7F3029B9BEFFFFFF7F80E2E6BEFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F2B85553EFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F0F00633EFFFFFF7F7EEE8ABF01FB3FBD9A3035BFFFFFFF7FAD23F8BEFFFFFF7FFFFFFF7FFFFFFF7FE2FEA63EFFFFFF7F4730DDBDFFFFFF7F40C33ABFFFFFFF7FFFFFFF7FA34A6E3FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FF667803FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F4FC890BEFFFFFF7F764A163FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F008E64BFFFFFFF7FFFFFFF7F0E149BBE50490F3FFFFFFF7F55EF163FFFFFFF7F130CAC3C9AC1683EFFFFFF7FFFFFFF7FFFFFFF7F615F0DC0FFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F6E058E3FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F1FB6CF3EFFFFFF7F545414BFFFFFFF7FFFFFFF7F03B2AC3DFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F2269AEBF44F1FEBEFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FF120AD3CFFFFFF7F79BC3E3EFFFFFF7F0E1CC13EFFFFFF7F1ADF58BEFFFFFF7FFFFFFF7F8AC980BEFFFFFF7F5A5A233F441865BFFFFFFF7F3724BCBFFFFFFF7FFFFFFF7FFFFFFF7F53CEBCBEA09514BFFFFFFF7FFFFFFF7FFFFFFF7F3C4C663C017367BFFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FD3786C3FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F0A15A33EFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F5508E23FC5661A3EB3CE283F8ABE693E79D3333FFFFFFF7FCC098ABEFFFFFF7FD9FEBA3FFFFFFF7F7B72223FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F7DFDA83FFFFFFF7FFFFFFF7F5C46043EFFFFFF7FA72436BF2D10A33FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F7349B83EFFFFFF7F33CE28BFFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FDE36983D88BA8A3DFFFFFF7FFFFFFF7F3991883DFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FB03FA83FFFFFFF7FFFFFFF7FFFFFFF7FD6F68DBEFFFFFF7FFFFFFF7F282E733DEA12B13EFFFFFF7F0D2F6BBFFFFFFF7FFFFFFF7FFFFFFF7F8DAEAC3EFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F64A3023C0A323BBFC8622EBFFFFFFF7F56A72F3FAEE7DA3BFFFFFF7FB462A1BEFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FEE92A03DFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F1D10863FFFFFFF7FFFFFFF7F7D6BE9BDFFFFFF7F69D8CCBEFFFFFF7F8ADC99BEFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FDF235C3F92204E3EFFFFFF7FFFFFFF7FFFFFFF7F58CE293EFFFFFF7F1E15FCBC2F003F3FFFFFFF7F25CB52BEFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F902B61BF2E3F123FFFFFFF7F3CB92DBFFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FCB5CBD3EFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F0A7991BFFFFFFF7FFFFFFF7F27CA27BF154584BE8B8A4FBFFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F45BBBF3ED9BF2ABF7603033FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F3032653EFFFFFF7F60017EBF2F32063EFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F1AB27C3FFFFFFF7FFFFFFF7FFFFFFF7F1F11F63EFFFFFF7FFFFFFF7F9C9AD13CFFFFFF7FCB6619BFFFFFFF7F012A2E3FB7159F3F15B9AF3FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F44883DBFFFFFFF7F1A1D8FBFFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7FFFFFFF7F"> : tensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
  func.func private @erf_inv(%arg0: tensor<20x20xf32>) -> tensor<20x20xf32> {
    %0 = call @xla_fallback_erf_inv(%arg0) : (tensor<20x20xf32>) -> tensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
  func.func private @xla_fallback_erf_inv(%arg0: tensor<20x20xf32>) -> tensor<20x20xf32> {
    %0 = stablehlo.abs %arg0 : tensor<20x20xf32>
    %1 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %2 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %3 = stablehlo.compare  EQ, %0, %2 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %4 = stablehlo.constant dense<0x7F800000> : tensor<f32>
    %5 = stablehlo.constant dense<0x7F800000> : tensor<20x20xf32>
    %6 = stablehlo.multiply %arg0, %5 : tensor<20x20xf32>
    %7 = stablehlo.negate %arg0 : tensor<20x20xf32>
    %8 = stablehlo.multiply %7, %arg0 : tensor<20x20xf32>
    %9 = stablehlo.log_plus_one %8 : tensor<20x20xf32>
    %10 = stablehlo.negate %9 : tensor<20x20xf32>
    %11 = stablehlo.constant dense<5.000000e+00> : tensor<f32>
    %12 = stablehlo.constant dense<5.000000e+00> : tensor<20x20xf32>
    %13 = stablehlo.compare  LT, %10, %12 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %14 = stablehlo.constant dense<1.50140941> : tensor<f32>
    %15 = stablehlo.constant dense<1.50140941> : tensor<20x20xf32>
    %16 = stablehlo.constant dense<2.83297682> : tensor<f32>
    %17 = stablehlo.constant dense<2.83297682> : tensor<20x20xf32>
    %18 = stablehlo.select %13, %15, %17 : tensor<20x20xi1>, tensor<20x20xf32>
    %19 = stablehlo.constant dense<0.246640727> : tensor<f32>
    %20 = stablehlo.constant dense<0.246640727> : tensor<20x20xf32>
    %21 = stablehlo.constant dense<1.00167406> : tensor<f32>
    %22 = stablehlo.constant dense<1.00167406> : tensor<20x20xf32>
    %23 = stablehlo.select %13, %20, %22 : tensor<20x20xi1>, tensor<20x20xf32>
    %24 = stablehlo.constant dense<-0.00417768164> : tensor<f32>
    %25 = stablehlo.constant dense<-0.00417768164> : tensor<20x20xf32>
    %26 = stablehlo.constant dense<0.00943887047> : tensor<f32>
    %27 = stablehlo.constant dense<0.00943887047> : tensor<20x20xf32>
    %28 = stablehlo.select %13, %25, %27 : tensor<20x20xi1>, tensor<20x20xf32>
    %29 = stablehlo.constant dense<-0.00125372503> : tensor<f32>
    %30 = stablehlo.constant dense<-0.00125372503> : tensor<20x20xf32>
    %31 = stablehlo.constant dense<-0.0076224613> : tensor<f32>
    %32 = stablehlo.constant dense<-0.0076224613> : tensor<20x20xf32>
    %33 = stablehlo.select %13, %30, %32 : tensor<20x20xi1>, tensor<20x20xf32>
    %34 = stablehlo.constant dense<2.1858087E-4> : tensor<f32>
    %35 = stablehlo.constant dense<2.1858087E-4> : tensor<20x20xf32>
    %36 = stablehlo.constant dense<0.00573950773> : tensor<f32>
    %37 = stablehlo.constant dense<0.00573950773> : tensor<20x20xf32>
    %38 = stablehlo.select %13, %35, %37 : tensor<20x20xi1>, tensor<20x20xf32>
    %39 = stablehlo.constant dense<-4.39150654E-6> : tensor<f32>
    %40 = stablehlo.constant dense<-4.39150654E-6> : tensor<20x20xf32>
    %41 = stablehlo.constant dense<-0.00367342844> : tensor<f32>
    %42 = stablehlo.constant dense<-0.00367342844> : tensor<20x20xf32>
    %43 = stablehlo.select %13, %40, %42 : tensor<20x20xi1>, tensor<20x20xf32>
    %44 = stablehlo.constant dense<-3.5233877E-6> : tensor<f32>
    %45 = stablehlo.constant dense<-3.5233877E-6> : tensor<20x20xf32>
    %46 = stablehlo.constant dense<0.00134934322> : tensor<f32>
    %47 = stablehlo.constant dense<0.00134934322> : tensor<20x20xf32>
    %48 = stablehlo.select %13, %45, %47 : tensor<20x20xi1>, tensor<20x20xf32>
    %49 = stablehlo.constant dense<3.43273939E-7> : tensor<f32>
    %50 = stablehlo.constant dense<3.43273939E-7> : tensor<20x20xf32>
    %51 = stablehlo.constant dense<1.00950558E-4> : tensor<f32>
    %52 = stablehlo.constant dense<1.00950558E-4> : tensor<20x20xf32>
    %53 = stablehlo.select %13, %50, %52 : tensor<20x20xi1>, tensor<20x20xf32>
    %54 = stablehlo.constant dense<2.81022636E-8> : tensor<f32>
    %55 = stablehlo.constant dense<2.81022636E-8> : tensor<20x20xf32>
    %56 = stablehlo.constant dense<-2.00214257E-4> : tensor<f32>
    %57 = stablehlo.constant dense<-2.00214257E-4> : tensor<20x20xf32>
    %58 = stablehlo.select %13, %55, %57 : tensor<20x20xi1>, tensor<20x20xf32>
    %59 = stablehlo.constant dense<2.500000e+00> : tensor<f32>
    %60 = stablehlo.constant dense<2.500000e+00> : tensor<20x20xf32>
    %61 = stablehlo.subtract %10, %60 : tensor<20x20xf32>
    %62 = stablehlo.sqrt %10 : tensor<20x20xf32>
    %63 = stablehlo.constant dense<3.000000e+00> : tensor<f32>
    %64 = stablehlo.constant dense<3.000000e+00> : tensor<20x20xf32>
    %65 = stablehlo.subtract %62, %64 : tensor<20x20xf32>
    %66 = stablehlo.select %13, %61, %65 : tensor<20x20xi1>, tensor<20x20xf32>
    %67 = stablehlo.multiply %58, %66 : tensor<20x20xf32>
    %68 = stablehlo.add %53, %67 : tensor<20x20xf32>
    %69 = stablehlo.multiply %68, %66 : tensor<20x20xf32>
    %70 = stablehlo.add %48, %69 : tensor<20x20xf32>
    %71 = stablehlo.multiply %70, %66 : tensor<20x20xf32>
    %72 = stablehlo.add %43, %71 : tensor<20x20xf32>
    %73 = stablehlo.multiply %72, %66 : tensor<20x20xf32>
    %74 = stablehlo.add %38, %73 : tensor<20x20xf32>
    %75 = stablehlo.multiply %74, %66 : tensor<20x20xf32>
    %76 = stablehlo.add %33, %75 : tensor<20x20xf32>
    %77 = stablehlo.multiply %76, %66 : tensor<20x20xf32>
    %78 = stablehlo.add %28, %77 : tensor<20x20xf32>
    %79 = stablehlo.multiply %78, %66 : tensor<20x20xf32>
    %80 = stablehlo.add %23, %79 : tensor<20x20xf32>
    %81 = stablehlo.multiply %80, %66 : tensor<20x20xf32>
    %82 = stablehlo.add %18, %81 : tensor<20x20xf32>
    %83 = stablehlo.multiply %82, %arg0 : tensor<20x20xf32>
    %84 = stablehlo.select %3, %6, %83 : tensor<20x20xi1>, tensor<20x20xf32>
    return %84 : tensor<20x20xf32>
  }
}
