// RUN: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x20xbf16>
    %1 = call @expected() : () -> tensor<20x20xbf16>
    %2 = stablehlo.convert %0 : (tensor<20x20xbf16>) -> tensor<20x20xf32>
    %3 = stablehlo.constant dense<-4.000000e+00> : tensor<20x20xf32>
    %4 = stablehlo.constant dense<4.000000e+00> : tensor<20x20xf32>
    %5 = stablehlo.clamp %3, %2, %4 : tensor<20x20xf32>
    %6 = stablehlo.multiply %5, %5 : tensor<20x20xf32>
    %7 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %8 = stablehlo.multiply %7, %6 : tensor<20x20xf32>
    %9 = stablehlo.constant dense<-2.72614237E-10> : tensor<20x20xf32>
    %10 = stablehlo.add %8, %9 : tensor<20x20xf32>
    %11 = stablehlo.multiply %10, %6 : tensor<20x20xf32>
    %12 = stablehlo.constant dense<2.77068146E-8> : tensor<20x20xf32>
    %13 = stablehlo.add %11, %12 : tensor<20x20xf32>
    %14 = stablehlo.multiply %13, %6 : tensor<20x20xf32>
    %15 = stablehlo.constant dense<-2.10102394E-6> : tensor<20x20xf32>
    %16 = stablehlo.add %14, %15 : tensor<20x20xf32>
    %17 = stablehlo.multiply %16, %6 : tensor<20x20xf32>
    %18 = stablehlo.constant dense<-5.69250624E-5> : tensor<20x20xf32>
    %19 = stablehlo.add %17, %18 : tensor<20x20xf32>
    %20 = stablehlo.multiply %19, %6 : tensor<20x20xf32>
    %21 = stablehlo.constant dense<-7.34990637E-4> : tensor<20x20xf32>
    %22 = stablehlo.add %20, %21 : tensor<20x20xf32>
    %23 = stablehlo.multiply %22, %6 : tensor<20x20xf32>
    %24 = stablehlo.constant dense<-2.954600e-03> : tensor<20x20xf32>
    %25 = stablehlo.add %23, %24 : tensor<20x20xf32>
    %26 = stablehlo.multiply %25, %6 : tensor<20x20xf32>
    %27 = stablehlo.constant dense<-0.0160960332> : tensor<20x20xf32>
    %28 = stablehlo.add %26, %27 : tensor<20x20xf32>
    %29 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %30 = stablehlo.multiply %29, %6 : tensor<20x20xf32>
    %31 = stablehlo.constant dense<-1.45660715E-5> : tensor<20x20xf32>
    %32 = stablehlo.add %30, %31 : tensor<20x20xf32>
    %33 = stablehlo.multiply %32, %6 : tensor<20x20xf32>
    %34 = stablehlo.constant dense<-2.13374049E-4> : tensor<20x20xf32>
    %35 = stablehlo.add %33, %34 : tensor<20x20xf32>
    %36 = stablehlo.multiply %35, %6 : tensor<20x20xf32>
    %37 = stablehlo.constant dense<-0.00168282702> : tensor<20x20xf32>
    %38 = stablehlo.add %36, %37 : tensor<20x20xf32>
    %39 = stablehlo.multiply %38, %6 : tensor<20x20xf32>
    %40 = stablehlo.constant dense<-0.00737332925> : tensor<20x20xf32>
    %41 = stablehlo.add %39, %40 : tensor<20x20xf32>
    %42 = stablehlo.multiply %41, %6 : tensor<20x20xf32>
    %43 = stablehlo.constant dense<-0.0142647391> : tensor<20x20xf32>
    %44 = stablehlo.add %42, %43 : tensor<20x20xf32>
    %45 = stablehlo.multiply %5, %28 : tensor<20x20xf32>
    %46 = stablehlo.divide %45, %44 : tensor<20x20xf32>
    %47 = stablehlo.convert %46 : (tensor<20x20xf32>) -> tensor<20x20xbf16>
    %48 = stablehlo.custom_call @check.eq(%47, %1) : (tensor<20x20xbf16>, tensor<20x20xbf16>) -> tensor<i1>
    return %48 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x20xbf16> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xbf16>
    return %0 : tensor<20x20xbf16>
  }
  func.func private @expected() -> tensor<20x20xbf16> {
    %0 = stablehlo.constant dense<"0x803F80BF593F77BF80BF723F2F3F80BF6FBE38BFF33E803F0E3F7E3F803F68BF7D3F79BF803FAABE7F3FC9BD803F803F803F80BF26BEC33E80BF80BF80BF7E3F80BF46BF7C3F803F203F80BF803F7DBF803F7E3F803F7FBF44BF573F11BF7F3F803FB13E343F80BF143F803F803FDC3E80BF80BF80BF73BF7CBF75BF483F803F78BF80BF803FB7BEE7BD803F803F983C01BF48BF433F7FBF7E3F43BF803F80BF03BF76BF80BF16BF80BF593F803F693F803F7E3F7F3F7EBF803F7CBF80BF80BF803F80BF803F7F3F0ABF5F3F6FBF6DBF7E3F80BF7EBF803F4A3FBA3D093E5F3F803F3B3D0D3F80BF77BF803F5DBA803F72BF4FBF803F80BF803F6C3F9F3E97BE803F803FC33E803F803F7E3F803F5C3F5FBF7E3F803F803F803F7F3F7F3F7A3FEDBE05BF803F7EBF7E3F473FECBE803F803F263E7F3F80BF80BF803F6C3F80BF80BF63BF3B3F7F3F04BFF83E743FAE3E803F653F633F80BF9FBED8BE7C3F69BF80BF1ABF80BF60BF763FD3BE7EBF39BF57BE7D3F7F3F68BF553D80BF803F4F3F80BF66BFD93D583F443F803FBA3E803F393F80BF7E3F803F7ABF80BF803F803F2F3F4FBFAC3E7F3F113FFB3E80BF7FBF61BF803F803F803FBDBD2F3F803F803F7FBF80BF803F803F80BF27BF80BF77BFCDBE49BF80BF803F80BF783F7EBF7DBF80BF713F803F803F803F80BF803F2ABF803F60BFEABE803F3B3F80BF4BBF803F7FBF21BF80BF803F63BF83BE08BE80BF803F803F24BFCBBD7FBF80BF803F483F80BF6FBF80BFBEBE7FBF7FBF803F80BF803F7BBFC13E4C3FE7BE803F803F80BF7FBF423D723F793F80BF7BBF803F7ABF063F803FB9BD6B3FE63E803F753F80BF803F11BF803F80BF7CBF75BF80BF80BF80BF80BF7F3F80BF50BF80BF80BF80BF343F7A3FF5BE76BF61BF80BF803F7FBF7F3F80BF80BF1ABF693F80BF94BECF3E7C3F46BF80BF3ABE803F80BF743F6FBF803F7F3F80BF723F80BF80BF80BF80BF8FBDC13E803F80BF80BF803F803FDC3E803F80BF7FBF753F803F74BFB83E80BF75BF803F803F4CBF80BF3FBF38BF373F0A3E7FBF7E3F80BF5FBF7EBF9E3E80BF7FBF223F803F80BF803F1CBE69BF5BBF803F32BF80BF7F3F403FDF3E803F80BF"> : tensor<20x20xbf16>
    return %0 : tensor<20x20xbf16>
  }
}

