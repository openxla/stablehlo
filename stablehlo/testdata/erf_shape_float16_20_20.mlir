// RUN: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x20xf16>
    %1 = call @expected() : () -> tensor<20x20xf16>
    %2 = stablehlo.convert %0 : (tensor<20x20xf16>) -> tensor<20x20xf32>
    %3 = stablehlo.constant dense<-4.000000e+00> : tensor<20x20xf32>
    %4 = stablehlo.constant dense<4.000000e+00> : tensor<20x20xf32>
    %5 = stablehlo.clamp %3, %2, %4 : tensor<20x20xf32>
    %6 = stablehlo.multiply %5, %5 : tensor<20x20xf32>
    %7 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %8 = stablehlo.multiply %7, %6 : tensor<20x20xf32>
    %9 = stablehlo.constant dense<-2.72614237E-10> : tensor<20x20xf32>
    %10 = stablehlo.add %8, %9 : tensor<20x20xf32>
    %11 = stablehlo.multiply %10, %6 : tensor<20x20xf32>
    %12 = stablehlo.constant dense<2.77068146E-8> : tensor<20x20xf32>
    %13 = stablehlo.add %11, %12 : tensor<20x20xf32>
    %14 = stablehlo.multiply %13, %6 : tensor<20x20xf32>
    %15 = stablehlo.constant dense<-2.10102394E-6> : tensor<20x20xf32>
    %16 = stablehlo.add %14, %15 : tensor<20x20xf32>
    %17 = stablehlo.multiply %16, %6 : tensor<20x20xf32>
    %18 = stablehlo.constant dense<-5.69250624E-5> : tensor<20x20xf32>
    %19 = stablehlo.add %17, %18 : tensor<20x20xf32>
    %20 = stablehlo.multiply %19, %6 : tensor<20x20xf32>
    %21 = stablehlo.constant dense<-7.34990637E-4> : tensor<20x20xf32>
    %22 = stablehlo.add %20, %21 : tensor<20x20xf32>
    %23 = stablehlo.multiply %22, %6 : tensor<20x20xf32>
    %24 = stablehlo.constant dense<-2.954600e-03> : tensor<20x20xf32>
    %25 = stablehlo.add %23, %24 : tensor<20x20xf32>
    %26 = stablehlo.multiply %25, %6 : tensor<20x20xf32>
    %27 = stablehlo.constant dense<-0.0160960332> : tensor<20x20xf32>
    %28 = stablehlo.add %26, %27 : tensor<20x20xf32>
    %29 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %30 = stablehlo.multiply %29, %6 : tensor<20x20xf32>
    %31 = stablehlo.constant dense<-1.45660715E-5> : tensor<20x20xf32>
    %32 = stablehlo.add %30, %31 : tensor<20x20xf32>
    %33 = stablehlo.multiply %32, %6 : tensor<20x20xf32>
    %34 = stablehlo.constant dense<-2.13374049E-4> : tensor<20x20xf32>
    %35 = stablehlo.add %33, %34 : tensor<20x20xf32>
    %36 = stablehlo.multiply %35, %6 : tensor<20x20xf32>
    %37 = stablehlo.constant dense<-0.00168282702> : tensor<20x20xf32>
    %38 = stablehlo.add %36, %37 : tensor<20x20xf32>
    %39 = stablehlo.multiply %38, %6 : tensor<20x20xf32>
    %40 = stablehlo.constant dense<-0.00737332925> : tensor<20x20xf32>
    %41 = stablehlo.add %39, %40 : tensor<20x20xf32>
    %42 = stablehlo.multiply %41, %6 : tensor<20x20xf32>
    %43 = stablehlo.constant dense<-0.0142647391> : tensor<20x20xf32>
    %44 = stablehlo.add %42, %43 : tensor<20x20xf32>
    %45 = stablehlo.multiply %5, %28 : tensor<20x20xf32>
    %46 = stablehlo.divide %45, %44 : tensor<20x20xf32>
    %47 = stablehlo.convert %46 : (tensor<20x20xf32>) -> tensor<20x20xf16>
    %48 = stablehlo.custom_call @check.eq(%47, %1) : (tensor<20x20xf16>, tensor<20x20xf16>) -> tensor<i1>
    return %48 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x20xf16> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf16>
    return %0 : tensor<20x20xf16>
  }
  func.func private @expected() -> tensor<20x20xf16> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf16>
    return %0 : tensor<20x20xf16>
  }
}

