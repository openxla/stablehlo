// RUN: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x20xf32>
    %1 = call @expected() : () -> tensor<20x20xf32>
    %2 = stablehlo.constant dense<-4.000000e+00> : tensor<20x20xf32>
    %3 = stablehlo.constant dense<4.000000e+00> : tensor<20x20xf32>
    %4 = stablehlo.clamp %2, %0, %3 : tensor<20x20xf32>
    %5 = stablehlo.multiply %4, %4 : tensor<20x20xf32>
    %6 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %7 = stablehlo.multiply %6, %5 : tensor<20x20xf32>
    %8 = stablehlo.constant dense<-2.72614237E-10> : tensor<20x20xf32>
    %9 = stablehlo.add %7, %8 : tensor<20x20xf32>
    %10 = stablehlo.multiply %9, %5 : tensor<20x20xf32>
    %11 = stablehlo.constant dense<2.77068146E-8> : tensor<20x20xf32>
    %12 = stablehlo.add %10, %11 : tensor<20x20xf32>
    %13 = stablehlo.multiply %12, %5 : tensor<20x20xf32>
    %14 = stablehlo.constant dense<-2.10102394E-6> : tensor<20x20xf32>
    %15 = stablehlo.add %13, %14 : tensor<20x20xf32>
    %16 = stablehlo.multiply %15, %5 : tensor<20x20xf32>
    %17 = stablehlo.constant dense<-5.69250624E-5> : tensor<20x20xf32>
    %18 = stablehlo.add %16, %17 : tensor<20x20xf32>
    %19 = stablehlo.multiply %18, %5 : tensor<20x20xf32>
    %20 = stablehlo.constant dense<-7.34990637E-4> : tensor<20x20xf32>
    %21 = stablehlo.add %19, %20 : tensor<20x20xf32>
    %22 = stablehlo.multiply %21, %5 : tensor<20x20xf32>
    %23 = stablehlo.constant dense<-2.954600e-03> : tensor<20x20xf32>
    %24 = stablehlo.add %22, %23 : tensor<20x20xf32>
    %25 = stablehlo.multiply %24, %5 : tensor<20x20xf32>
    %26 = stablehlo.constant dense<-0.0160960332> : tensor<20x20xf32>
    %27 = stablehlo.add %25, %26 : tensor<20x20xf32>
    %28 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %29 = stablehlo.multiply %28, %5 : tensor<20x20xf32>
    %30 = stablehlo.constant dense<-1.45660715E-5> : tensor<20x20xf32>
    %31 = stablehlo.add %29, %30 : tensor<20x20xf32>
    %32 = stablehlo.multiply %31, %5 : tensor<20x20xf32>
    %33 = stablehlo.constant dense<-2.13374049E-4> : tensor<20x20xf32>
    %34 = stablehlo.add %32, %33 : tensor<20x20xf32>
    %35 = stablehlo.multiply %34, %5 : tensor<20x20xf32>
    %36 = stablehlo.constant dense<-0.00168282702> : tensor<20x20xf32>
    %37 = stablehlo.add %35, %36 : tensor<20x20xf32>
    %38 = stablehlo.multiply %37, %5 : tensor<20x20xf32>
    %39 = stablehlo.constant dense<-0.00737332925> : tensor<20x20xf32>
    %40 = stablehlo.add %38, %39 : tensor<20x20xf32>
    %41 = stablehlo.multiply %40, %5 : tensor<20x20xf32>
    %42 = stablehlo.constant dense<-0.0142647391> : tensor<20x20xf32>
    %43 = stablehlo.add %41, %42 : tensor<20x20xf32>
    %44 = stablehlo.multiply %4, %27 : tensor<20x20xf32>
    %45 = stablehlo.divide %44, %43 : tensor<20x20xf32>
    %46 = stablehlo.custom_call @check.eq(%45, %1) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<i1>
    return %46 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
  func.func private @expected() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
}

