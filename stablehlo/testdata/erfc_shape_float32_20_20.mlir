// RUN: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x20xf32>
    %1 = call @expected() : () -> tensor<20x20xf32>
    %2 = stablehlo.multiply %0, %0 : tensor<20x20xf32>
    %3 = stablehlo.negate %2 : tensor<20x20xf32>
    %4 = stablehlo.abs %0 : tensor<20x20xf32>
    %5 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %6 = stablehlo.divide %5, %2 : tensor<20x20xf32>
    %7 = stablehlo.exponential %3 : tensor<20x20xf32>
    %8 = stablehlo.divide %5, %4 : tensor<20x20xf32>
    %9 = stablehlo.multiply %7, %8 : tensor<20x20xf32>
    %10 = stablehlo.constant dense<2.000000e+00> : tensor<20x20xf32>
    %11 = stablehlo.compare  LT, %4, %10 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %12 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %13 = stablehlo.multiply %12, %6 : tensor<20x20xf32>
    %14 = stablehlo.constant dense<2.326820e-02> : tensor<20x20xf32>
    %15 = stablehlo.add %13, %14 : tensor<20x20xf32>
    %16 = stablehlo.multiply %15, %6 : tensor<20x20xf32>
    %17 = stablehlo.constant dense<-0.138703942> : tensor<20x20xf32>
    %18 = stablehlo.add %16, %17 : tensor<20x20xf32>
    %19 = stablehlo.multiply %18, %6 : tensor<20x20xf32>
    %20 = stablehlo.constant dense<0.368742466> : tensor<20x20xf32>
    %21 = stablehlo.add %19, %20 : tensor<20x20xf32>
    %22 = stablehlo.multiply %21, %6 : tensor<20x20xf32>
    %23 = stablehlo.constant dense<-0.582473278> : tensor<20x20xf32>
    %24 = stablehlo.add %22, %23 : tensor<20x20xf32>
    %25 = stablehlo.multiply %24, %6 : tensor<20x20xf32>
    %26 = stablehlo.constant dense<0.621000468> : tensor<20x20xf32>
    %27 = stablehlo.add %25, %26 : tensor<20x20xf32>
    %28 = stablehlo.multiply %27, %6 : tensor<20x20xf32>
    %29 = stablehlo.constant dense<-0.494451523> : tensor<20x20xf32>
    %30 = stablehlo.add %28, %29 : tensor<20x20xf32>
    %31 = stablehlo.multiply %30, %6 : tensor<20x20xf32>
    %32 = stablehlo.constant dense<3.404880e-01> : tensor<20x20xf32>
    %33 = stablehlo.add %31, %32 : tensor<20x20xf32>
    %34 = stablehlo.multiply %33, %6 : tensor<20x20xf32>
    %35 = stablehlo.constant dense<-0.274112701> : tensor<20x20xf32>
    %36 = stablehlo.add %34, %35 : tensor<20x20xf32>
    %37 = stablehlo.multiply %36, %6 : tensor<20x20xf32>
    %38 = stablehlo.constant dense<0.563825965> : tensor<20x20xf32>
    %39 = stablehlo.add %37, %38 : tensor<20x20xf32>
    %40 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %41 = stablehlo.multiply %40, %6 : tensor<20x20xf32>
    %42 = stablehlo.constant dense<-10.477664> : tensor<20x20xf32>
    %43 = stablehlo.add %41, %42 : tensor<20x20xf32>
    %44 = stablehlo.multiply %43, %6 : tensor<20x20xf32>
    %45 = stablehlo.constant dense<1.297720e+01> : tensor<20x20xf32>
    %46 = stablehlo.add %44, %45 : tensor<20x20xf32>
    %47 = stablehlo.multiply %46, %6 : tensor<20x20xf32>
    %48 = stablehlo.constant dense<-7.49551868> : tensor<20x20xf32>
    %49 = stablehlo.add %47, %48 : tensor<20x20xf32>
    %50 = stablehlo.multiply %49, %6 : tensor<20x20xf32>
    %51 = stablehlo.constant dense<2.92101908> : tensor<20x20xf32>
    %52 = stablehlo.add %50, %51 : tensor<20x20xf32>
    %53 = stablehlo.multiply %52, %6 : tensor<20x20xf32>
    %54 = stablehlo.constant dense<-1.01526523> : tensor<20x20xf32>
    %55 = stablehlo.add %53, %54 : tensor<20x20xf32>
    %56 = stablehlo.multiply %55, %6 : tensor<20x20xf32>
    %57 = stablehlo.constant dense<0.42184633> : tensor<20x20xf32>
    %58 = stablehlo.add %56, %57 : tensor<20x20xf32>
    %59 = stablehlo.multiply %58, %6 : tensor<20x20xf32>
    %60 = stablehlo.constant dense<-0.282076746> : tensor<20x20xf32>
    %61 = stablehlo.add %59, %60 : tensor<20x20xf32>
    %62 = stablehlo.multiply %61, %6 : tensor<20x20xf32>
    %63 = stablehlo.constant dense<0.564189494> : tensor<20x20xf32>
    %64 = stablehlo.add %62, %63 : tensor<20x20xf32>
    %65 = stablehlo.select %11, %39, %64 : tensor<20x20xi1>, tensor<20x20xf32>
    %66 = stablehlo.multiply %9, %65 : tensor<20x20xf32>
    %67 = stablehlo.constant dense<-88.7228394> : tensor<20x20xf32>
    %68 = stablehlo.compare  LT, %3, %67 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %69 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %70 = stablehlo.select %68, %69, %66 : tensor<20x20xi1>, tensor<20x20xf32>
    %71 = stablehlo.compare  LT, %0, %69 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %72 = stablehlo.subtract %10, %70 : tensor<20x20xf32>
    %73 = stablehlo.select %71, %72, %70 : tensor<20x20xi1>, tensor<20x20xf32>
    %74 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %75 = stablehlo.multiply %0, %0 : tensor<20x20xf32>
    %76 = stablehlo.constant dense<0.000000e+00> : tensor<20x20xf32>
    %77 = stablehlo.multiply %76, %75 : tensor<20x20xf32>
    %78 = stablehlo.constant dense<7.85386146E-5> : tensor<20x20xf32>
    %79 = stablehlo.add %77, %78 : tensor<20x20xf32>
    %80 = stablehlo.multiply %79, %75 : tensor<20x20xf32>
    %81 = stablehlo.constant dense<-8.0101937E-4> : tensor<20x20xf32>
    %82 = stablehlo.add %80, %81 : tensor<20x20xf32>
    %83 = stablehlo.multiply %82, %75 : tensor<20x20xf32>
    %84 = stablehlo.constant dense<0.00518832775> : tensor<20x20xf32>
    %85 = stablehlo.add %83, %84 : tensor<20x20xf32>
    %86 = stablehlo.multiply %85, %75 : tensor<20x20xf32>
    %87 = stablehlo.constant dense<-0.0268538129> : tensor<20x20xf32>
    %88 = stablehlo.add %86, %87 : tensor<20x20xf32>
    %89 = stablehlo.multiply %88, %75 : tensor<20x20xf32>
    %90 = stablehlo.constant dense<0.112835854> : tensor<20x20xf32>
    %91 = stablehlo.add %89, %90 : tensor<20x20xf32>
    %92 = stablehlo.multiply %91, %75 : tensor<20x20xf32>
    %93 = stablehlo.constant dense<-0.37612626> : tensor<20x20xf32>
    %94 = stablehlo.add %92, %93 : tensor<20x20xf32>
    %95 = stablehlo.multiply %94, %75 : tensor<20x20xf32>
    %96 = stablehlo.constant dense<1.12837911> : tensor<20x20xf32>
    %97 = stablehlo.add %95, %96 : tensor<20x20xf32>
    %98 = stablehlo.multiply %0, %97 : tensor<20x20xf32>
    %99 = stablehlo.subtract %74, %98 : tensor<20x20xf32>
    %100 = stablehlo.abs %0 : tensor<20x20xf32>
    %101 = stablehlo.compare  LT, %100, %74 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %102 = stablehlo.select %101, %99, %73 : tensor<20x20xi1>, tensor<20x20xf32>
    %103 = stablehlo.custom_call @check.eq(%102, %1) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<i1>
    return %103 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
  func.func private @expected() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
}

