// RUN-DISABLED: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0:2 = call @inputs() : () -> (tensor<10x10x10xf32>, tensor<2xui32>)
    %1 = call @expected() : () -> tensor<10x2x10xf32>
    %2 = call @_take(%0#0, %0#1) : (tensor<10x10x10xf32>, tensor<2xui32>) -> tensor<10x2x10xf32>
    %3 = stablehlo.custom_call @check.eq(%2, %1) : (tensor<10x2x10xf32>, tensor<10x2x10xf32>) -> tensor<i1>
    return %3 : tensor<i1>
  }
  func.func private @inputs() -> (tensor<10x10x10xf32>, tensor<2xui32>) {
    %0 = stablehlo.constant dense<"0xtensor<10x10x10xf32>
    %1 = stablehlo.constant dense<[2, 4]> : tensor<2xui32>
    return %0, %1 : tensor<10x10x10xf32>, tensor<2xui32>
  }
  func.func private @expected() -> tensor<10x2x10xf32> {
    %0 = stablehlo.constant dense<"0xtensor<10x2x10xf32>
    return %0 : tensor<10x2x10xf32>
  }
  func.func private @_take(%arg0: tensor<10x10x10xf32>, %arg1: tensor<2xui32>) -> tensor<10x2x10xf32> {
    %0 = stablehlo.broadcast_in_dim %arg1, dims = [0] : (tensor<2xui32>) -> tensor<2x1xui32>
    %1 = "stablehlo.gather"(%arg0, %0) {dimension_numbers = #stablehlo.gather<offset_dims = [0, 2], collapsed_slice_dims = [1], start_index_map = [1], index_vector_dim = 1>, slice_sizes = dense<[10, 1, 10]> : tensor<3xi64>} : (tensor<10x10x10xf32>, tensor<2x1xui32>) -> tensor<10x2x10xf32>
    return %1 : tensor<10x2x10xf32>
  }
}

