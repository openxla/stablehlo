// RUN: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x30xi16>
    %1 = call @expected() : () -> tensor<20x30xi16>
    %2 = stablehlo.constant dense<1> : tensor<i16>
    %3 = stablehlo.broadcast_in_dim %2, dims = [] : (tensor<i16>) -> tensor<20x30xi16>
    %4 = stablehlo.custom_call @check.eq(%3, %1) : (tensor<20x30xi16>, tensor<20x30xi16>) -> tensor<i1>
    return %4 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x30xi16> {
    %0 = stablehlo.constant dense<"0x0000FEFF010001000000FFFF03000400000000000300FBFF0200050000000000020001000200FBFF0000FDFF000001000100FFFF01000000FFFF000000000100000000000300FDFFFFFF0000000001000100FDFFFEFF0100FEFF0000FBFF0100010000000000FFFF0000FBFFFFFFFFFFFEFFFDFF0400F8FF02000000FDFF00000000000000000000FFFFFDFF0500FEFF030002000200FAFF0000FDFFFEFF000000000200010003000400FEFF010001000400000000000100010002000000000007000200000000000200030001000000FDFF0200FBFF02000500030006000000FDFF0000FDFFFFFFF9FF040000000100FFFFFDFFFEFF0200FEFFFFFF0400000000000100FFFF00000000000006000000FEFF0400FDFFFAFF00000500FCFFFCFFFCFF0000FFFF04000100FDFF00000000FEFFFDFF0100FBFF030003000000FCFF0000FFFFFEFF0600FEFF0000FFFF030002000000FBFF0200020001000300FFFF010001000300FEFF0100000001000100FDFFFFFFFFFF06000400FEFF0200FFFF03000000FBFF04000000040000000100000000000100030000000200FDFFFAFF00000100FAFFFDFF04000300000000000000FFFF000004000000FBFFFFFFFCFF0000FFFF00000000040004000000FFFFFDFF00000200020002000400FFFFFFFFFFFF0200010000000300FDFF00000000FFFF000002000200FAFF02000300FFFF0100FBFFFFFF0000FEFF040001000100FFFFFDFF0300FFFF0300FDFF05000000FDFFFDFF040002000100040001000000FEFFFFFF0000FFFF000002000100FFFF000000000100FDFFFFFF0500FEFF0100FFFFFFFF0000FEFF050000000300FBFFFEFF000000000200020003000500FEFF00000300FCFF000000000000020001000000FFFF0300FBFF0000FFFFFFFFFEFFFDFF030000000000FFFFFEFFFEFFFEFF01000100FCFF0500FCFF0000020000000500FFFF06000400FFFF0500FFFFFFFFFEFF000000000000FCFF0100FDFF00000000FEFFFFFF0200FEFF000001000300FEFFFDFF0400FFFFFDFF0000FDFF0400FFFFFBFF03000000020005000200FDFF050000000500FDFFFFFFFEFF010000000000FDFFFFFF0200FFFFFDFF0400FEFFFEFF03000000FFFFFEFF02000200000000000100FFFF0500FEFF0000FEFF0100FFFF0200000002000000040000000000FEFF02000000FEFFFBFF01000000FFFFFDFF030001000300000000000200000004000100FCFFFFFF0300FDFF0300FBFF0100040004000000FEFFFEFF0100FEFF0000F9FF01000100000000000700FEFF04000000020000000300FDFF0000FFFF0000040002000300FBFF040005000000FFFFFBFFFFFF0300FDFF000001000100FEFFFCFF000000000900000007000000000000000400FDFF010000000100FFFF000001000100FFFF0000F8FF02000300FFFF0100FFFF00000100F9FF03000400000004000300FFFF000000000000FDFFFFFF0000FCFF03000300FDFFFBFFFCFF0000000008000200FEFFFFFF0100040000000000F9FFFDFFFEFF03000000000001000200FDFFFFFFFEFF0300FFFF02000100FDFFFDFF0100FDFFFDFF00000100FCFFFFFF000000000600FAFF000003000200FEFF00000100FEFF00000000FEFF00000300FCFF0300FBFF0100FEFFFEFFFFFF0200000000000000FBFFFFFF0000"> : tensor<20x30xi16>
    return %0 : tensor<20x30xi16>
  }
  func.func private @expected() -> tensor<20x30xi16> {
    %0 = stablehlo.constant dense<1> : tensor<20x30xi16>
    return %0 : tensor<20x30xi16>
  }
}
