// RUN: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x30xi16>
    %1 = call @expected() : () -> tensor<20x30xi16>
    %2 = call @integer_pow(%0) : (tensor<20x30xi16>) -> tensor<20x30xi16>
    %3 = stablehlo.custom_call @check.eq(%2, %1) : (tensor<20x30xi16>, tensor<20x30xi16>) -> tensor<i1>
    return %3 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x30xi16> {
    %0 = stablehlo.constant dense<"0xtensor<20x30xi16>
    return %0 : tensor<20x30xi16>
  }
  func.func private @expected() -> tensor<20x30xi16> {
    %0 = stablehlo.constant dense<"0xtensor<20x30xi16>
    return %0 : tensor<20x30xi16>
  }
  func.func private @integer_pow(%arg0: tensor<20x30xi16>) -> tensor<20x30xi16> {
    %0 = stablehlo.multiply %arg0, %arg0 : tensor<20x30xi16>
    %1 = stablehlo.multiply %0, %0 : tensor<20x30xi16>
    return %1 : tensor<20x30xi16>
  }
}
