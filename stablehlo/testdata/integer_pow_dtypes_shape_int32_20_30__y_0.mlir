// RUN: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x30xi32>
    %1 = call @expected() : () -> tensor<20x30xi32>
    %2 = stablehlo.constant dense<1> : tensor<i32>
    %3 = stablehlo.broadcast_in_dim %2, dims = [] : (tensor<i32>) -> tensor<20x30xi32>
    %4 = stablehlo.custom_call @check.eq(%3, %1) : (tensor<20x30xi32>, tensor<20x30xi32>) -> tensor<i1>
    return %4 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x30xi32> {
    %0 = stablehlo.constant dense<"0xtensor<20x30xi32>
    return %0 : tensor<20x30xi32>
  }
  func.func private @expected() -> tensor<20x30xi32> {
    %0 = stablehlo.constant dense<1> : tensor<20x30xi32>
    return %0 : tensor<20x30xi32>
  }
}
