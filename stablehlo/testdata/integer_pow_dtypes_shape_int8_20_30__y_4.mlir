// RUN: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x30xi8>
    %1 = call @expected() : () -> tensor<20x30xi8>
    %2 = call @integer_pow(%0) : (tensor<20x30xi8>) -> tensor<20x30xi8>
    %3 = stablehlo.custom_call @check.eq(%2, %1) : (tensor<20x30xi8>, tensor<20x30xi8>) -> tensor<i1>
    return %3 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x30xi8> {
    %0 = stablehlo.constant dense<"0x00FFFE00010200FF000201FC00FD03020403FD03FD040106FFFC00040502FF02FD04000004FD05FD01010303020001050504FD04010200000304FD000003FC000400010001FD01FE000203FE000100000000F70000F900FF02000201FD03FE000700FC01FC00010102FF0303050104FF0504FE010006FF0000FE04FE0404FF0000FA0104FF040103FDFC0100FD00FFFCFF000000FB000201FD01FF0202020200FD030001FE000202000300000000FC02FC0001FE06FF000000010000FEFBFD00FD010205FE00FEFE03020202FDFFFEFDFF0200FB00FC0102FFF9000000FA020200FCFF00FE030104FE0006040000FF0302FC000300000403010001FFFEFD0004FD00FE00FF0100FD00FFFD0100FC0101FEFE02FF020005FE00FC0000000501FCFF00FF010502FE02FD03010001FFFE000000FC07FF03FFFEFFFA00FD00000000FC0001FBFF00FFFE0006FD00030502FF010000040002FFFEFCFFFE05FEFDFEFE010301000205FCFD0400FDFD00FE00020001FE00FCFF00FF01FDFC050201FF02FEFF020101040204000000030100FE0003FEFEFC04F700000000020202FF00FEFF0100FD00FEFA0400010300FEFE00010101FEFD0000FE030001FF04FD06FF02010000000203030300FE010203FF0200FF000500FCFC00FE03FFFD02FE0000FD0301FA04070101FFFF00FEFF0100040002F9020003FF0102FC01FCFAFEFDFE0603FE0201010000FB0100FEFD0002000004FF00FE02FE01000102FDFD01FDFE01FE02030400000101FDFC03FE00FA00FE0400FD04000102FFFE03FDFDFFFA02FD01FF00FF010203030003000001FF0100010004FEFFFD0606"> : tensor<20x30xi8>
    return %0 : tensor<20x30xi8>
  }
  func.func private @expected() -> tensor<20x30xi8> {
    %0 = stablehlo.constant dense<"0xtensor<20x30xi8>
    return %0 : tensor<20x30xi8>
  }
  func.func private @integer_pow(%arg0: tensor<20x30xi8>) -> tensor<20x30xi8> {
    %0 = stablehlo.multiply %arg0, %arg0 : tensor<20x30xi8>
    %1 = stablehlo.multiply %0, %0 : tensor<20x30xi8>
    return %1 : tensor<20x30xi8>
  }
}
