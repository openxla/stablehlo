// RUN-DISABLED: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x30xf32>
    %1 = call @expected() : () -> tensor<20x30xf32>
    %2 = stablehlo.multiply %0, %0 : tensor<20x30xf32>
    %3 = stablehlo.multiply %0, %2 : tensor<20x30xf32>
    %4 = stablehlo.multiply %2, %2 : tensor<20x30xf32>
    %5 = stablehlo.multiply %3, %4 : tensor<20x30xf32>
    %6 = stablehlo.multiply %4, %4 : tensor<20x30xf32>
    %7 = stablehlo.multiply %5, %6 : tensor<20x30xf32>
    %8 = stablehlo.multiply %6, %6 : tensor<20x30xf32>
    %9 = stablehlo.multiply %7, %8 : tensor<20x30xf32>
    %10 = stablehlo.multiply %8, %8 : tensor<20x30xf32>
    %11 = stablehlo.multiply %9, %10 : tensor<20x30xf32>
    %12 = stablehlo.multiply %10, %10 : tensor<20x30xf32>
    %13 = stablehlo.multiply %11, %12 : tensor<20x30xf32>
    %14 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %15 = stablehlo.broadcast_in_dim %14, dims = [] : (tensor<f32>) -> tensor<20x30xf32>
    %16 = stablehlo.divide %15, %13 : tensor<20x30xf32>
    %17 = stablehlo.custom_call @check.eq(%16, %1) : (tensor<20x30xf32>, tensor<20x30xf32>) -> tensor<i1>
    return %17 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x30xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x30xf32>
    return %0 : tensor<20x30xf32>
  }
  func.func private @expected() -> tensor<20x30xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x30xf32>
    return %0 : tensor<20x30xf32>
  }
}
