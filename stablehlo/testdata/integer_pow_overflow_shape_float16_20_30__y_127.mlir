// RUN: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x30xf16>
    %1 = call @expected() : () -> tensor<20x30xf16>
    %2 = call @integer_pow(%0) : (tensor<20x30xf16>) -> tensor<20x30xf16>
    %3 = stablehlo.custom_call @check.eq(%2, %1) : (tensor<20x30xf16>, tensor<20x30xf16>) -> tensor<i1>
    return %3 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x30xf16> {
    %0 = stablehlo.constant dense<"0xDBC3D5B750ADDF2EF8468FBFA53EEB4118C0DF403144B43A22A49BC44035A63607BC91C444C343C28C3F54B9FD37D7B98E3D3BB84943282446C36C429B3467B4903B18B4E2C6A74013C4A83DA4410EC6663C21289EC18BBE353A36BCBEC197420DC3DE4004BA5D3E034205426B405F3C003F73445347633CBBC50F46DD441942CAC14841D13863367EC440C3E445DDBA0D44F444E330333D08C2243034467AB71739C33E42C073C53D3D81B4B9BE9C3C83BC7A42AD430EC356B610C20BAD06442C3819C1F5C118C0EF22FC3EBC3881C23D408547A53BF4B08AC3C534E1C0FDC4CDBF88428EC0F43F8718E4C4FAC24DAD87B8173FCE405EC03DBDD83BA2BA0BBD3F39AABF53C83E3C63B96A41C241E1C4A5C5F3BBFB3B944499BA18B3CF460F44B9C4263C5DBF2D444A4421B80AC08C3D44B5BB2DB1373442683C46BDD4C19C400AC297BBE344DBC525C4143103C459B14C3FD5440945C3C01DC3E6C0FDC8403C53C162BC5BBC8A408D3D1F42F63D88439C2C42C16239804499B824C7434573B9E63C73423841FB428BC2F53942BB03BB63C4E84594C234BD613A09B69F4404446842B338163DA8B5D43F42BBEB3A093F32BD064210ADCD3E40B26BC201C3E4B539C0DBC6F3C13BB8C6C7AFC16AC58744A240863A2AB4C8AC4ABA4ABA793CB83995BD2BC0F0BDDB3BEE45FB3E09C0E136253619BCBBC4613834BD293E17449B4181BF1B3865C1CA40D2BEFBBC683E74BD003FDBC1CE42173F18435FC09AC37C3FD2AF4D43F93E5ABE1BA98BBEA2A71A41FAC3293D58C0F0C218C93544F1C03C3E2F41D33FDBC71F45F7B9232EA6C70FBEC73417411F39B93A5D30A9B4383D5ABC96444545C8C3B2C4CDB9D42EA12FACC0E43937BD44409AC5A23D13B1EAB326C022428DB9824251B8A43E4540B5325FBF4BC42FC2643EF8B7D0C0AA44AC37E52C4EC0A3B6DAAF43BD13250F436EB1F5BB833DFEC0E33DE83DE6C38F44BA3C6EC33BBADBC5E53F22AA4DC4B1390CC03841454544374644D935714219BAAEC385B831C14BB1F23C773C5E40F6C5AB3B573DCDBF8F4004401A210BBD153E1945F4C00142DE41DDBE2AC6964753ABF7BA37BCD045D099D22F7D42FC3B2A3A123B3241D5407EC19B40F5B9C8C4724089C05B3C9F3614C5BD3FEFC66CC00FA51DB9CB4375B9CE4462C13B3DD340CCADC63DC23CCC2F603FE93F5844F4AEC5BC10C36A4385BE0740C835B0C022B355415A3D7EC048C190BBA83F0FBAF64106B9FF3E7633EE45D5428CAA9D3713C1A43E613D3CC5CBB7BFC3943E23C33BC5BB42EBC3CFB66040E3C2903407B0773D4CB94F3FE2C161C0C142CB3C07B8BB3CA7C330C6EB3DCD3304C322B485BD63BAC03929BC014510C33E4192BE5F3F00BD0DC6EFC387C3F53D84BD2C40F445A7C59C453AB94BC368B97043B93956BC0B402D451A4297C5983E31BF1B440CBD63271D3DD7BD89BF5845FEC21242584267C0254429457F450838B23E8034823F4D4250C590353D406E4117B95E4017BB73C63EB3C2BE19C68B385F3CFD369344253FF6B25BC6023F38464D422141F9C6683F3CBD4F40073F1828873FED448245D9C0523B8B3722C2BAC395BA2AB7A446D2B2D4C2F2C157BB9CBF303F333DD941A94139430AC4703C0D4019C440C1D84361BD8BC0353BB9C1C7BDF2C37D45D644F34359C2BABDA144"> : tensor<20x30xf16>
    return %0 : tensor<20x30xf16>
  }
  func.func private @expected() -> tensor<20x30xf16> {
    %0 = stablehlo.constant dense<"0xtensor<20x30xf16>
    return %0 : tensor<20x30xf16>
  }
  func.func private @integer_pow(%arg0: tensor<20x30xf16>) -> tensor<20x30xf16> {
    %0 = stablehlo.multiply %arg0, %arg0 : tensor<20x30xf16>
    %1 = stablehlo.multiply %arg0, %0 : tensor<20x30xf16>
    %2 = stablehlo.multiply %0, %0 : tensor<20x30xf16>
    %3 = stablehlo.multiply %1, %2 : tensor<20x30xf16>
    %4 = stablehlo.multiply %2, %2 : tensor<20x30xf16>
    %5 = stablehlo.multiply %3, %4 : tensor<20x30xf16>
    %6 = stablehlo.multiply %4, %4 : tensor<20x30xf16>
    %7 = stablehlo.multiply %5, %6 : tensor<20x30xf16>
    %8 = stablehlo.multiply %6, %6 : tensor<20x30xf16>
    %9 = stablehlo.multiply %7, %8 : tensor<20x30xf16>
    %10 = stablehlo.multiply %8, %8 : tensor<20x30xf16>
    %11 = stablehlo.multiply %9, %10 : tensor<20x30xf16>
    return %11 : tensor<20x30xf16>
  }
}
