// RUN: stablehlo-opt -inline %s | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x20xf32>
    %1 = call @expected() : () -> tensor<20x20xf32>
    %2 = stablehlo.constant dense<5.000000e-01> : tensor<20x20xf32>
    %3 = stablehlo.compare  LT, %0, %2 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %4 = stablehlo.negate %0 : tensor<20x20xf32>
    %5 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %6 = stablehlo.subtract %0, %5 : tensor<20x20xf32>
    %7 = stablehlo.select %3, %4, %6 : tensor<20x20xi1>, tensor<20x20xf32>
    %8 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %9 = stablehlo.constant dense<676.520386> : tensor<20x20xf32>
    %10 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %11 = stablehlo.add %7, %10 : tensor<20x20xf32>
    %12 = stablehlo.divide %9, %11 : tensor<20x20xf32>
    %13 = stablehlo.add %8, %12 : tensor<20x20xf32>
    %14 = stablehlo.constant dense<-1259.13916> : tensor<20x20xf32>
    %15 = stablehlo.constant dense<2.000000e+00> : tensor<20x20xf32>
    %16 = stablehlo.add %7, %15 : tensor<20x20xf32>
    %17 = stablehlo.divide %14, %16 : tensor<20x20xf32>
    %18 = stablehlo.add %13, %17 : tensor<20x20xf32>
    %19 = stablehlo.constant dense<771.323425> : tensor<20x20xf32>
    %20 = stablehlo.constant dense<3.000000e+00> : tensor<20x20xf32>
    %21 = stablehlo.add %7, %20 : tensor<20x20xf32>
    %22 = stablehlo.divide %19, %21 : tensor<20x20xf32>
    %23 = stablehlo.add %18, %22 : tensor<20x20xf32>
    %24 = stablehlo.constant dense<-176.615036> : tensor<20x20xf32>
    %25 = stablehlo.constant dense<4.000000e+00> : tensor<20x20xf32>
    %26 = stablehlo.add %7, %25 : tensor<20x20xf32>
    %27 = stablehlo.divide %24, %26 : tensor<20x20xf32>
    %28 = stablehlo.add %23, %27 : tensor<20x20xf32>
    %29 = stablehlo.constant dense<12.5073433> : tensor<20x20xf32>
    %30 = stablehlo.constant dense<5.000000e+00> : tensor<20x20xf32>
    %31 = stablehlo.add %7, %30 : tensor<20x20xf32>
    %32 = stablehlo.divide %29, %31 : tensor<20x20xf32>
    %33 = stablehlo.add %28, %32 : tensor<20x20xf32>
    %34 = stablehlo.constant dense<-0.138571098> : tensor<20x20xf32>
    %35 = stablehlo.constant dense<6.000000e+00> : tensor<20x20xf32>
    %36 = stablehlo.add %7, %35 : tensor<20x20xf32>
    %37 = stablehlo.divide %34, %36 : tensor<20x20xf32>
    %38 = stablehlo.add %33, %37 : tensor<20x20xf32>
    %39 = stablehlo.constant dense<9.98436917E-6> : tensor<20x20xf32>
    %40 = stablehlo.constant dense<7.000000e+00> : tensor<20x20xf32>
    %41 = stablehlo.add %7, %40 : tensor<20x20xf32>
    %42 = stablehlo.divide %39, %41 : tensor<20x20xf32>
    %43 = stablehlo.add %38, %42 : tensor<20x20xf32>
    %44 = stablehlo.constant dense<1.50563267E-7> : tensor<20x20xf32>
    %45 = stablehlo.constant dense<8.000000e+00> : tensor<20x20xf32>
    %46 = stablehlo.add %7, %45 : tensor<20x20xf32>
    %47 = stablehlo.divide %44, %46 : tensor<20x20xf32>
    %48 = stablehlo.add %43, %47 : tensor<20x20xf32>
    %49 = stablehlo.constant dense<7.500000e+00> : tensor<20x20xf32>
    %50 = stablehlo.add %49, %7 : tensor<20x20xf32>
    %51 = stablehlo.constant dense<2.01490307> : tensor<20x20xf32>
    %52 = stablehlo.divide %7, %49 : tensor<20x20xf32>
    %53 = stablehlo.log_plus_one %52 : tensor<20x20xf32>
    %54 = stablehlo.add %51, %53 : tensor<20x20xf32>
    %55 = stablehlo.divide %50, %54 : tensor<20x20xf32>
    %56 = stablehlo.add %7, %2 : tensor<20x20xf32>
    %57 = stablehlo.subtract %56, %55 : tensor<20x20xf32>
    %58 = stablehlo.multiply %57, %54 : tensor<20x20xf32>
    %59 = stablehlo.log %48 : tensor<20x20xf32>
    %60 = stablehlo.constant dense<0.918938517> : tensor<20x20xf32>
    %61 = stablehlo.add %60, %58 : tensor<20x20xf32>
    %62 = stablehlo.add %61, %59 : tensor<20x20xf32>
    %63 = stablehlo.abs %0 : tensor<20x20xf32>
    %64 = stablehlo.floor %63 : tensor<20x20xf32>
    %65 = stablehlo.subtract %63, %64 : tensor<20x20xf32>
    %66 = stablehlo.compare  LT, %2, %65 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %67 = stablehlo.subtract %5, %65 : tensor<20x20xf32>
    %68 = stablehlo.select %66, %67, %65 : tensor<20x20xi1>, tensor<20x20xf32>
    %69 = stablehlo.constant dense<3.14159274> : tensor<20x20xf32>
    %70 = stablehlo.multiply %69, %68 : tensor<20x20xf32>
    %71 = stablehlo.sine %70 : tensor<20x20xf32>
    %72 = stablehlo.log %71 : tensor<20x20xf32>
    %73 = stablehlo.constant dense<1.14472985> : tensor<20x20xf32>
    %74 = stablehlo.subtract %73, %72 : tensor<20x20xf32>
    %75 = stablehlo.subtract %74, %62 : tensor<20x20xf32>
    %76 = stablehlo.is_finite %72 : (tensor<20x20xf32>) -> tensor<20x20xi1>
    %77 = stablehlo.negate %72 : tensor<20x20xf32>
    %78 = stablehlo.select %76, %75, %77 : tensor<20x20xi1>, tensor<20x20xf32>
    %79 = stablehlo.select %3, %78, %62 : tensor<20x20xi1>, tensor<20x20xf32>
    %80 = stablehlo.abs %0 : tensor<20x20xf32>
    %81 = stablehlo.constant dense<0x7F800000> : tensor<20x20xf32>
    %82 = stablehlo.compare  EQ, %80, %81 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %83 = stablehlo.constant dense<0x7F800000> : tensor<20x20xf32>
    %84 = stablehlo.select %82, %83, %79 : tensor<20x20xi1>, tensor<20x20xf32>
    %85 = stablehlo.custom_call @check.eq(%84, %1) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<i1>
    return %85 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
  func.func private @expected() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
}

