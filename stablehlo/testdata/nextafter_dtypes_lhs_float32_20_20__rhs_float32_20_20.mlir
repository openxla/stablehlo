// RUN-DISABLED: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0:2 = call @inputs() : () -> (tensor<20x20xf32>, tensor<20x20xf32>)
    %1 = call @expected() : () -> tensor<20x20xf32>
    %2 = stablehlo.bitcast_convert %0#0 : (tensor<20x20xf32>) -> tensor<20x20xi32>
    %3 = stablehlo.bitcast_convert %0#1 : (tensor<20x20xf32>) -> tensor<20x20xi32>
    %4 = stablehlo.compare  NE, %0#0, %0#0 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %5 = stablehlo.compare  NE, %0#1, %0#1 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %6 = stablehlo.or %4, %5 : tensor<20x20xi1>
    %7 = stablehlo.constant dense<0x7FC00000> : tensor<20x20xf32>
    %8 = stablehlo.bitcast_convert %7 : (tensor<20x20xf32>) -> tensor<20x20xi32>
    %9 = stablehlo.constant dense<-2147483648> : tensor<20x20xi32>
    %10 = stablehlo.constant dense<2147483647> : tensor<20x20xi32>
    %11 = stablehlo.and %2, %10 : tensor<20x20xi32>
    %12 = stablehlo.and %3, %10 : tensor<20x20xi32>
    %13 = stablehlo.compare  EQ, %0#0, %0#1 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %14 = stablehlo.constant dense<0> : tensor<20x20xi32>
    %15 = stablehlo.compare  EQ, %11, %14 : (tensor<20x20xi32>, tensor<20x20xi32>) -> tensor<20x20xi1>
    %16 = stablehlo.compare  EQ, %12, %14 : (tensor<20x20xi32>, tensor<20x20xi32>) -> tensor<20x20xi1>
    %17 = stablehlo.and %2, %9 : tensor<20x20xi32>
    %18 = stablehlo.and %3, %9 : tensor<20x20xi32>
    %19 = stablehlo.constant dense<1> : tensor<20x20xi32>
    %20 = stablehlo.or %18, %19 : tensor<20x20xi32>
    %21 = stablehlo.compare  NE, %17, %18 : (tensor<20x20xi32>, tensor<20x20xi32>) -> tensor<20x20xi1>
    %22 = stablehlo.compare  GT, %11, %12 : (tensor<20x20xi32>, tensor<20x20xi32>) -> tensor<20x20xi1>
    %23 = stablehlo.or %22, %21 : tensor<20x20xi1>
    %24 = stablehlo.constant dense<-1> : tensor<20x20xi32>
    %25 = stablehlo.select %23, %24, %19 : tensor<20x20xi1>, tensor<20x20xi32>
    %26 = stablehlo.add %2, %25 : tensor<20x20xi32>
    %27 = stablehlo.select %16, %3, %20 : tensor<20x20xi1>, tensor<20x20xi32>
    %28 = stablehlo.select %15, %27, %26 : tensor<20x20xi1>, tensor<20x20xi32>
    %29 = stablehlo.select %13, %3, %28 : tensor<20x20xi1>, tensor<20x20xi32>
    %30 = stablehlo.select %6, %8, %29 : tensor<20x20xi1>, tensor<20x20xi32>
    %31 = stablehlo.bitcast_convert %30 : (tensor<20x20xi32>) -> tensor<20x20xf32>
    %32 = stablehlo.custom_call @check.eq(%31, %1) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<i1>
    return %32 : tensor<i1>
  }
  func.func private @inputs() -> (tensor<20x20xf32>, tensor<20x20xf32>) {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    %1 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0, %1 : tensor<20x20xf32>, tensor<20x20xf32>
  }
  func.func private @expected() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xBEF0B4401DEDD5C0E34F2140C397603FC5C889C0D5180AC01401FCBFBC2D72C081BDA8C075047CC03FCB1F4098B1D9BFF1953CBE5F6E39C09F1141C04CAB4F4015E533406CFC47BFA27585BF49CE023CDF0F38C0710D01400AA85CC0D1990FBE110F88407EC4A4BF7BC300C0C21C31C0037D69C0BE9179C0B85D8AC0BE6AA23E6B818B3F9131B73FD6443CC05DB607406E0B70C03C02F1BFABEC0B409F9A5E407959A6BE0E5D61407E558D4018932E4082A80AC0A1C821C0FBF9D9BE9C3AECBF726C13C09B645AC0781CE93FD12E823E6E569CC0FBE134BF21B7C640AB8529BFE635D8BFFB564B4000F5DD3F77D43340D5BC843F22715ABF1C88E8BE4250583F9C593B40475EA7C0D4C2843FFFF3ABC012DF1CC08EDDF9BFCD58063EF4380CBE298449BFC0B3E93EF54FDF4019DAF63F4D814640D4A6193D33D88340D25C6840EF11BAC094F6AC3FAEFF19C0FF579A4002D635BF47B41D409B21B23F7E8CE23F97D19EBEEB5D0EC0925CD24081955540311789C01F3E8D3F1E77B7405BB36A3FACB2D33FDA4221BF7A81233F7879EFBDBEB705C029E381BFAD0B53C09502C43FF1BC90401F554C3F9FB09140E9014BBF2A15B0C0AF9EA23E025F7440666F00402EEF38C0C264EEBF5AA724C0EDC246BEBFC73B40C417033F07CE8DBFFDE2ABBF9F96EEBFD1F96A40D4482EC035C594C040EBA2C08A566CBEBDC1C13EB43A9ABFD221A2BF46D68640C47162BF447FA14088A742C08616F0BE575D1F4068679A3F137CADBECAEBD13F4F92EA3E9C68304010D4253E1712943EB962A03FF4CBA6BF3124DBBE0DCF5C4093D7933EE3628CBF7FE567C02FEEE4BE1CA103BF8553993F39362141C12D3740C2E054BF8559B6C0DDFAD13DF69FFA3E54B299C04F20EF403EE8A6C038DB15C0CC8128C0B37A9BBF3A543F40115F91C0012123405BA4813FACE165BFD5412AC0EEC89F3E3AABF9BEE62D343E956709C0DDD10ABDCA180340946642C0E373C23E90F774C00FEB03C0E876FD3F07DED3BD45F9923E6D53BEC02B0B07407AE69FC0B1EC094046068E3F7A9F5AC0C2DB89C00FAED13F3D7FC6BF32A2243C6A2FCE3FC3EB483DC626AE403B57AA40D79995401C08674047B43A3F25ED0340E20E76BFC9C41F4043B20BC001AD84BF368A3F408285B8BF931C07C1EC93583F57FFD7BFBDF5D13FD80F68C09EC9E5BF5783983CDA1E1DC06BC0B3C08DE6C6BF210DEE401DA80DC058ED81BF2C4F1440119AB6BF00FCAC3FB6548940054D61C0C00EA5C01235653F40183AC006D705BFD56539405FD7C73F8166B53EDF801040ADD78C4096C4D43F60A989BE4094B1BF321C62C0609173BDA42A2840579242C016FB883F7C80883F35380740E13F293F05DF75407D520ABF748094C0845C5D40880588C051AC03BFE36088BF47EF9D3F933B7740C48B97BE7A204A3F805AAC3F9DD01940B0DC65C0D24A1D40699E2B40BCE2B53F7B16683F09565C409B8DE83FD976A7BF837E0140D2FDC83F9CA819BE1399B64069D79140402729BFF87ACB40DCEA9AC084AE973E7C41503E7A6F7FBF16A83FC0ED488F3F215EC8BF928F87C0951886BF6807803F9B8C88BFC2CA7440F235F9BF5569463F7C4DDE3F7DCD513FE6E4753E8DFB0F411D63F1BF2283CBBECF826A3EA72959C0CF4D09BF1DA576402B073C4069E09040CF3E134005D6C5BEC0B0A73F15F7893F22D5C6402B1EBF3FEC09BFBE4DA855C088C489BFFA214AC07AD8A73F246BC040F541D23F05ACEB3F27513DC07DAF1BBF61D4D2BDB434174099BECDBF781D0DBFC9ECB4403EDACABF587F8ABFD79E0B4001C4F340E25145BFBD9E80BFEAD49ABFDD0AD4BFA6068540D5930C40264D19BF599ABD3F59CAC0BF67D5B7C04AAB31C0F8F4D73FB987134040C500C09CCB7640D360ADBF5B1D0640BD32D5C0DE90FF3F19424940D7A2C2BF6D5EFE3EE2ADA7BFEABFF0BF09E73C40D899E53E6C585540C3C2C5BCFEFF58401C44C240C008A0BF8DE7D4BFBBFADD3FE43A813FE21781BF0043E83FF7A4FF3FE8EF8340199F10BE4F613D403E5518BE3C4F83C032371D40BA2F0C4090F8623E0CEE1F3FC1B8E9BF1979943F702DC93DF0732BC0667D2640F681AA3F5988B03F2A41CC3FF39437C08409C2C00B6AA93FB4E60540C2D786BFF6B96CC09A59AB3FE54BBF3F2EF8BC3F9A7B98C06BDE1B3E1F0381C0D993AF3FDA6A8540DFF87EBE79CF05C01A93503F7FBA553E1BD7CA3E234B65402F4F0E41B6003840"> : tensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
}

