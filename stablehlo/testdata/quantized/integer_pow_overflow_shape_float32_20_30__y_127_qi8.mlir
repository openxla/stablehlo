// RUN: stablehlo-translate --interpret -split-input-file %s

module attributes {jax.uses_shape_polymorphism = true} {
  func.func @main() -> tensor<20x30xf32> {
    %cst = stablehlo.constant dense<"0xtensor<20x30xf32>
    %cst_0 = stablehlo.constant dense<"0xtensor<20x30xf32>
    %0 = stablehlo.uniform_quantize %cst : (tensor<20x30xf32>) -> tensor<20x30x!quant.uniform<i8:f32, 0.0039215482917486456:-128>>
    %1 = stablehlo.multiply %0, %0 : (tensor<20x30x!quant.uniform<i8:f32, 0.0039215482917486456:-128>>, tensor<20x30x!quant.uniform<i8:f32, 0.0039215482917486456:-128>>) -> tensor<20x30x!quant.uniform<i8:f32, 0.00392152795604631:-128>>
    %2 = stablehlo.uniform_dequantize %1 : (tensor<20x30x!quant.uniform<i8:f32, 0.00392152795604631:-128>>) -> tensor<20x30xf32>
    %3 = stablehlo.uniform_quantize %2 : (tensor<20x30xf32>) -> tensor<20x30x!quant.uniform<i8:f32, 0.00392152795604631:-128>>
    %4 = stablehlo.multiply %0, %3 : (tensor<20x30x!quant.uniform<i8:f32, 0.0039215482917486456:-128>>, tensor<20x30x!quant.uniform<i8:f32, 0.00392152795604631:-128>>) -> tensor<20x30x!quant.uniform<i8:f32, 0.0039215076203439753:-128>>
    %5 = stablehlo.multiply %3, %3 : (tensor<20x30x!quant.uniform<i8:f32, 0.00392152795604631:-128>>, tensor<20x30x!quant.uniform<i8:f32, 0.00392152795604631:-128>>) -> tensor<20x30x!quant.uniform<i8:f32, 0.0039214872846416397:-128>>
    %6 = stablehlo.uniform_dequantize %5 : (tensor<20x30x!quant.uniform<i8:f32, 0.0039214872846416397:-128>>) -> tensor<20x30xf32>
    %7 = stablehlo.uniform_quantize %6 : (tensor<20x30xf32>) -> tensor<20x30x!quant.uniform<i8:f32, 0.0039214872846416397:-128>>
    %8 = stablehlo.multiply %4, %7 : (tensor<20x30x!quant.uniform<i8:f32, 0.0039215076203439753:-128>>, tensor<20x30x!quant.uniform<i8:f32, 0.0039214872846416397:-128>>) -> tensor<20x30x!quant.uniform<i8:f32, 0.0039214262775346346:-128>>
    %9 = stablehlo.multiply %7, %7 : (tensor<20x30x!quant.uniform<i8:f32, 0.0039214872846416397:-128>>, tensor<20x30x!quant.uniform<i8:f32, 0.0039214872846416397:-128>>) -> tensor<20x30x!quant.uniform<i8:f32, 0.003921405941832299:-128>>
    %10 = stablehlo.uniform_dequantize %9 : (tensor<20x30x!quant.uniform<i8:f32, 0.003921405941832299:-128>>) -> tensor<20x30xf32>
    %11 = stablehlo.uniform_quantize %10 : (tensor<20x30xf32>) -> tensor<20x30x!quant.uniform<i8:f32, 0.003921405941832299:-128>>
    %12 = stablehlo.multiply %8, %11 : (tensor<20x30x!quant.uniform<i8:f32, 0.0039214262775346346:-128>>, tensor<20x30x!quant.uniform<i8:f32, 0.003921405941832299:-128>>) -> tensor<20x30x!quant.uniform<i8:f32, 0.0039212635919159532:-128>>
    %13 = stablehlo.multiply %11, %11 : (tensor<20x30x!quant.uniform<i8:f32, 0.003921405941832299:-128>>, tensor<20x30x!quant.uniform<i8:f32, 0.003921405941832299:-128>>) -> tensor<20x30x!quant.uniform<i8:f32, 0.0039212432562136185:-128>>
    %14 = stablehlo.uniform_dequantize %13 : (tensor<20x30x!quant.uniform<i8:f32, 0.0039212432562136185:-128>>) -> tensor<20x30xf32>
    %15 = stablehlo.uniform_quantize %14 : (tensor<20x30xf32>) -> tensor<20x30x!quant.uniform<i8:f32, 0.0039212432562136185:-128>>
    %16 = stablehlo.multiply %12, %15 : (tensor<20x30x!quant.uniform<i8:f32, 0.0039212635919159532:-128>>, tensor<20x30x!quant.uniform<i8:f32, 0.0039212432562136185:-128>>) -> tensor<20x30x!quant.uniform<i8:f32, 0.0039209382206785914:-128>>
    %17 = stablehlo.multiply %15, %15 : (tensor<20x30x!quant.uniform<i8:f32, 0.0039212432562136185:-128>>, tensor<20x30x!quant.uniform<i8:f32, 0.0039212432562136185:-128>>) -> tensor<20x30x!quant.uniform<i8:f32, 0.0039209178849762558:-128>>
    %18 = stablehlo.uniform_dequantize %17 : (tensor<20x30x!quant.uniform<i8:f32, 0.0039209178849762558:-128>>) -> tensor<20x30xf32>
    %19 = stablehlo.uniform_quantize %18 : (tensor<20x30xf32>) -> tensor<20x30x!quant.uniform<i8:f32, 0.0039209178849762558:-128>>
    %20 = stablehlo.multiply %16, %19 : (tensor<20x30x!quant.uniform<i8:f32, 0.0039209382206785914:-128>>, tensor<20x30x!quant.uniform<i8:f32, 0.0039209178849762558:-128>>) -> tensor<20x30x!quant.uniform<i8:f32, 0.0039202874782038669:-128>>
    %21 = stablehlo.multiply %19, %19 : (tensor<20x30x!quant.uniform<i8:f32, 0.0039209178849762558:-128>>, tensor<20x30x!quant.uniform<i8:f32, 0.0039209178849762558:-128>>) -> tensor<20x30x!quant.uniform<i8:f32, 0.0039202671425015321:-128>>
    %22 = stablehlo.multiply %20, %21 : (tensor<20x30x!quant.uniform<i8:f32, 0.0039202874782038669:-128>>, tensor<20x30x!quant.uniform<i8:f32, 0.0039202671425015321:-128>>) -> tensor<20x30x!quant.uniform<i8:f32, 0.0039189864607418285:-128>>
    %23 = stablehlo.uniform_dequantize %22 : (tensor<20x30x!quant.uniform<i8:f32, 0.0039189864607418285:-128>>) -> tensor<20x30xf32>
    %24 = stablehlo.custom_call @check.eq(%cst_0, %23) : (tensor<20x30xf32>, tensor<20x30xf32>) -> tensor<i1>
    return %23 : tensor<20x30xf32>
  }
}
