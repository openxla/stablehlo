// RUN-DISABLED: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0:3 = call @inputs() : () -> (tensor<9xf16>, tensor<9xf16>, tensor<9xf16>)
    %1 = call @expected() : () -> tensor<9xf16>
    %2 = call @regularized_incomplete_beta(%0#0, %0#1, %0#2) : (tensor<9xf16>, tensor<9xf16>, tensor<9xf16>) -> tensor<9xf16>
    %3 = stablehlo.custom_call @check.eq(%2, %1) : (tensor<9xf16>, tensor<9xf16>) -> tensor<i1>
    return %3 : tensor<i1>
  }
  func.func private @inputs() -> (tensor<9xf16>, tensor<9xf16>, tensor<9xf16>) {
    %0 = stablehlo.constant dense<[-1.599610e+00, -1.400390e+00, -1.000000e+00, 0.000000e+00, 9.997550e-02, 3.000490e-01, 1.000000e+00, 1.400390e+00, 1.599610e+00]> : tensor<9xf16>
    %1 = stablehlo.constant dense<[-1.599610e+00, 1.400390e+00, 1.000000e+00, 0.000000e+00, 1.999510e-01, 9.997550e-02, 1.000000e+00, 1.400390e+00, -1.599610e+00]> : tensor<9xf16>
    %2 = stablehlo.constant dense<[1.000000e+00, -1.000000e+00, 2.000000e+00, 1.000000e+00, 3.000490e-01, 3.000490e-01, -1.000000e+00, 2.400390e+00, 1.599610e+00]> : tensor<9xf16>
    return %0, %1, %2 : tensor<9xf16>, tensor<9xf16>, tensor<9xf16>
  }
  func.func private @expected() -> tensor<9xf16> {
    %0 = stablehlo.constant dense<[0x7E00, 0x7E00, 0x7E00, 0x7E00, 6.230460e-01, 1.945800e-01, 0x7E00, 0x7E00, 0x7E00]> : tensor<9xf16>
    return %0 : tensor<9xf16>
  }
  func.func private @regularized_incomplete_beta(%arg0: tensor<9xf16>, %arg1: tensor<9xf16>, %arg2: tensor<9xf16>) -> tensor<9xf16> {
    %0 = call @xla_fallback_regularized_incomplete_beta(%arg0, %arg1, %arg2) : (tensor<9xf16>, tensor<9xf16>, tensor<9xf16>) -> tensor<9xf16>
    return %0 : tensor<9xf16>
  }
  func.func private @or.57(%arg0: tensor<i1>, %arg1: tensor<i1>) -> tensor<i1> {
    %0 = stablehlo.or %arg0, %arg1 : tensor<i1>
    return %0 : tensor<i1>
  }
  func.func private @Betainc_body.61(%arg0: tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>> {
    %0 = stablehlo.get_tuple_element %arg0[1] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<i1>
    %1 = stablehlo.get_tuple_element %arg0[0] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<ui32>
    %2 = stablehlo.constant dense<1> : tensor<ui32>
    %3 = stablehlo.add %1, %2 : tensor<ui32>
    %4 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<9xui32>
    %5 = stablehlo.constant dense<0> : tensor<ui32>
    %6 = stablehlo.constant dense<0> : tensor<9xui32>
    %7 = stablehlo.compare  EQ, %4, %6 : (tensor<9xui32>, tensor<9xui32>) -> tensor<9xi1>
    %8 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %9 = stablehlo.constant dense<0.000000e+00> : tensor<9xf32>
    %10 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %11 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %12 = stablehlo.select %7, %9, %11 : tensor<9xi1>, tensor<9xf32>
    %13 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<9xui32>
    %14 = stablehlo.constant dense<1> : tensor<ui32>
    %15 = stablehlo.constant dense<1> : tensor<9xui32>
    %16 = stablehlo.compare  EQ, %13, %15 : (tensor<9xui32>, tensor<9xui32>) -> tensor<9xi1>
    %17 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %18 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %19 = stablehlo.constant dense<2> : tensor<ui32>
    %20 = stablehlo.constant dense<2> : tensor<9xui32>
    %21 = stablehlo.remainder %13, %20 : tensor<9xui32>
    %22 = stablehlo.constant dense<0> : tensor<ui32>
    %23 = stablehlo.constant dense<0> : tensor<9xui32>
    %24 = stablehlo.compare  EQ, %21, %23 : (tensor<9xui32>, tensor<9xui32>) -> tensor<9xi1>
    %25 = stablehlo.get_tuple_element %arg0[5] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<9xf32>
    %26 = stablehlo.constant dense<1> : tensor<ui32>
    %27 = stablehlo.constant dense<1> : tensor<9xui32>
    %28 = stablehlo.subtract %13, %27 : tensor<9xui32>
    %29 = stablehlo.constant dense<2> : tensor<ui32>
    %30 = stablehlo.constant dense<2> : tensor<9xui32>
    %31 = stablehlo.divide %28, %30 : tensor<9xui32>
    %32 = stablehlo.convert %31 : (tensor<9xui32>) -> tensor<9xf32>
    %33 = stablehlo.add %25, %32 : tensor<9xf32>
    %34 = stablehlo.negate %33 : tensor<9xf32>
    %35 = stablehlo.get_tuple_element %arg0[6] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<9xf32>
    %36 = stablehlo.add %25, %35 : tensor<9xf32>
    %37 = stablehlo.add %36, %32 : tensor<9xf32>
    %38 = stablehlo.multiply %34, %37 : tensor<9xf32>
    %39 = stablehlo.get_tuple_element %arg0[7] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<9xf32>
    %40 = stablehlo.multiply %38, %39 : tensor<9xf32>
    %41 = stablehlo.constant dense<2.000000e+00> : tensor<f32>
    %42 = stablehlo.constant dense<2.000000e+00> : tensor<9xf32>
    %43 = stablehlo.multiply %42, %32 : tensor<9xf32>
    %44 = stablehlo.add %25, %43 : tensor<9xf32>
    %45 = stablehlo.multiply %42, %32 : tensor<9xf32>
    %46 = stablehlo.add %25, %45 : tensor<9xf32>
    %47 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %48 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %49 = stablehlo.add %46, %48 : tensor<9xf32>
    %50 = stablehlo.multiply %44, %49 : tensor<9xf32>
    %51 = stablehlo.divide %40, %50 : tensor<9xf32>
    %52 = stablehlo.subtract %35, %32 : tensor<9xf32>
    %53 = stablehlo.multiply %32, %52 : tensor<9xf32>
    %54 = stablehlo.multiply %53, %39 : tensor<9xf32>
    %55 = stablehlo.multiply %42, %32 : tensor<9xf32>
    %56 = stablehlo.add %25, %55 : tensor<9xf32>
    %57 = stablehlo.subtract %56, %48 : tensor<9xf32>
    %58 = stablehlo.multiply %42, %32 : tensor<9xf32>
    %59 = stablehlo.add %25, %58 : tensor<9xf32>
    %60 = stablehlo.multiply %57, %59 : tensor<9xf32>
    %61 = stablehlo.divide %54, %60 : tensor<9xf32>
    %62 = stablehlo.select %24, %51, %61 : tensor<9xi1>, tensor<9xf32>
    %63 = stablehlo.select %16, %18, %62 : tensor<9xi1>, tensor<9xf32>
    %64 = stablehlo.get_tuple_element %arg0[2] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<9xf32>
    %65 = stablehlo.divide %63, %64 : tensor<9xf32>
    %66 = stablehlo.add %12, %65 : tensor<9xf32>
    %67 = stablehlo.abs %66 : tensor<9xf32>
    %68 = stablehlo.constant dense<5.96046448E-8> : tensor<f32>
    %69 = stablehlo.constant dense<5.96046448E-8> : tensor<9xf32>
    %70 = stablehlo.compare  LT, %67, %69 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %71 = stablehlo.select %70, %69, %66 : tensor<9xi1>, tensor<9xf32>
    %72 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %73 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %74 = stablehlo.get_tuple_element %arg0[3] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<9xf32>
    %75 = stablehlo.multiply %63, %74 : tensor<9xf32>
    %76 = stablehlo.add %12, %75 : tensor<9xf32>
    %77 = stablehlo.abs %76 : tensor<9xf32>
    %78 = stablehlo.compare  LT, %77, %69 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %79 = stablehlo.select %78, %69, %76 : tensor<9xi1>, tensor<9xf32>
    %80 = stablehlo.divide %73, %79 : tensor<9xf32>
    %81 = stablehlo.multiply %71, %80 : tensor<9xf32>
    %82 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %83 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %84 = stablehlo.subtract %81, %83 : tensor<9xf32>
    %85 = stablehlo.abs %84 : tensor<9xf32>
    %86 = stablehlo.constant dense<5.96046448E-8> : tensor<f32>
    %87 = stablehlo.constant dense<5.96046448E-8> : tensor<9xf32>
    %88 = stablehlo.compare  GE, %85, %87 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %89 = stablehlo.constant dense<false> : tensor<i1>
    %90 = stablehlo.reduce(%88 init: %89) across dimensions = [0] : (tensor<9xi1>, tensor<i1>) -> tensor<i1>
     reducer(%arg1: tensor<i1>, %arg2: tensor<i1>)  {
      %94 = stablehlo.or %arg1, %arg2 : tensor<i1>
      stablehlo.return %94 : tensor<i1>
    }
    %91 = stablehlo.get_tuple_element %arg0[4] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<9xf32>
    %92 = stablehlo.multiply %91, %81 : tensor<9xf32>
    %93 = stablehlo.tuple %3, %90, %71, %80, %92, %25, %35, %39 {xla_shape = "(u32[], pred[], f32[9]{0}, f32[9]{0}, f32[9]{0}, /*index=5*/f32[9]{0}, f32[9]{0}, f32[9]{0})"} : tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>
    return %93 : tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>
  }
  func.func private @Betainc_condition.157(%arg0: tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<i1> {
    %0 = stablehlo.get_tuple_element %arg0[2] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<9xf32>
    %1 = stablehlo.get_tuple_element %arg0[3] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<9xf32>
    %2 = stablehlo.get_tuple_element %arg0[4] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<9xf32>
    %3 = stablehlo.get_tuple_element %arg0[5] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<9xf32>
    %4 = stablehlo.get_tuple_element %arg0[6] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<9xf32>
    %5 = stablehlo.get_tuple_element %arg0[7] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<9xf32>
    %6 = stablehlo.get_tuple_element %arg0[0] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<ui32>
    %7 = stablehlo.constant dense<200> : tensor<ui32>
    %8 = stablehlo.compare  LT, %6, %7 : (tensor<ui32>, tensor<ui32>) -> tensor<i1>
    %9 = stablehlo.get_tuple_element %arg0[1] : (tuple<tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>>) -> tensor<i1>
    %10 = stablehlo.and %8, %9 : tensor<i1>
    return %10 : tensor<i1>
  }
  func.func private @xla_fallback_regularized_incomplete_beta(%arg0: tensor<9xf16>, %arg1: tensor<9xf16>, %arg2: tensor<9xf16>) -> tensor<9xf16> {
    %0 = stablehlo.constant dense<1> : tensor<ui32>
    %1 = stablehlo.constant dense<true> : tensor<i1>
    %2 = stablehlo.constant dense<0> : tensor<ui32>
    %3 = stablehlo.constant dense<0> : tensor<9xui32>
    %4 = stablehlo.constant dense<0> : tensor<ui32>
    %5 = stablehlo.constant dense<0> : tensor<9xui32>
    %6 = stablehlo.compare  EQ, %3, %5 : (tensor<9xui32>, tensor<9xui32>) -> tensor<9xi1>
    %7 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %8 = stablehlo.constant dense<0.000000e+00> : tensor<9xf32>
    %9 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %10 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %11 = stablehlo.select %6, %8, %10 : tensor<9xi1>, tensor<9xf32>
    %12 = stablehlo.abs %11 : tensor<9xf32>
    %13 = stablehlo.constant dense<5.96046448E-8> : tensor<f32>
    %14 = stablehlo.constant dense<5.96046448E-8> : tensor<9xf32>
    %15 = stablehlo.compare  LT, %12, %14 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %16 = stablehlo.select %15, %14, %11 : tensor<9xi1>, tensor<9xf32>
    %17 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %18 = stablehlo.constant dense<0.000000e+00> : tensor<9xf32>
    %19 = stablehlo.convert %arg2 : (tensor<9xf16>) -> tensor<9xf32>
    %20 = stablehlo.convert %arg0 : (tensor<9xf16>) -> tensor<9xf32>
    %21 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %22 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %23 = stablehlo.add %20, %22 : tensor<9xf32>
    %24 = stablehlo.convert %arg1 : (tensor<9xf16>) -> tensor<9xf32>
    %25 = stablehlo.add %20, %24 : tensor<9xf32>
    %26 = stablehlo.constant dense<2.000000e+00> : tensor<f32>
    %27 = stablehlo.constant dense<2.000000e+00> : tensor<9xf32>
    %28 = stablehlo.add %25, %27 : tensor<9xf32>
    %29 = stablehlo.divide %23, %28 : tensor<9xf32>
    %30 = stablehlo.compare  LT, %19, %29 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %31 = stablehlo.select %30, %20, %24 : tensor<9xi1>, tensor<9xf32>
    %32 = stablehlo.select %30, %24, %20 : tensor<9xi1>, tensor<9xf32>
    %33 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %34 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %35 = stablehlo.subtract %34, %19 : tensor<9xf32>
    %36 = stablehlo.select %30, %19, %35 : tensor<9xi1>, tensor<9xf32>
    %37:8 = stablehlo.while(%iterArg = %0, %iterArg_0 = %1, %iterArg_1 = %16, %iterArg_2 = %18, %iterArg_3 = %16, %iterArg_4 = %31, %iterArg_5 = %32, %iterArg_6 = %36) : tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>
     cond {
      %467 = stablehlo.constant dense<200> : tensor<ui32>
      %468 = stablehlo.compare  LT, %iterArg, %467 : (tensor<ui32>, tensor<ui32>) -> tensor<i1>
      %469 = stablehlo.and %468, %iterArg_0 : tensor<i1>
      stablehlo.return %469 : tensor<i1>
    } do {
      %467 = stablehlo.constant dense<1> : tensor<ui32>
      %468 = stablehlo.add %iterArg, %467 : tensor<ui32>
      %469 = stablehlo.broadcast_in_dim %iterArg, dims = [] : (tensor<ui32>) -> tensor<9xui32>
      %470 = stablehlo.constant dense<0> : tensor<ui32>
      %471 = stablehlo.constant dense<0> : tensor<9xui32>
      %472 = stablehlo.compare  EQ, %469, %471 : (tensor<9xui32>, tensor<9xui32>) -> tensor<9xi1>
      %473 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
      %474 = stablehlo.constant dense<0.000000e+00> : tensor<9xf32>
      %475 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
      %476 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
      %477 = stablehlo.select %472, %474, %476 : tensor<9xi1>, tensor<9xf32>
      %478 = stablehlo.broadcast_in_dim %iterArg, dims = [] : (tensor<ui32>) -> tensor<9xui32>
      %479 = stablehlo.constant dense<1> : tensor<ui32>
      %480 = stablehlo.constant dense<1> : tensor<9xui32>
      %481 = stablehlo.compare  EQ, %478, %480 : (tensor<9xui32>, tensor<9xui32>) -> tensor<9xi1>
      %482 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
      %483 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
      %484 = stablehlo.constant dense<2> : tensor<ui32>
      %485 = stablehlo.constant dense<2> : tensor<9xui32>
      %486 = stablehlo.remainder %478, %485 : tensor<9xui32>
      %487 = stablehlo.constant dense<0> : tensor<ui32>
      %488 = stablehlo.constant dense<0> : tensor<9xui32>
      %489 = stablehlo.compare  EQ, %486, %488 : (tensor<9xui32>, tensor<9xui32>) -> tensor<9xi1>
      %490 = stablehlo.constant dense<1> : tensor<ui32>
      %491 = stablehlo.constant dense<1> : tensor<9xui32>
      %492 = stablehlo.subtract %478, %491 : tensor<9xui32>
      %493 = stablehlo.constant dense<2> : tensor<ui32>
      %494 = stablehlo.constant dense<2> : tensor<9xui32>
      %495 = stablehlo.divide %492, %494 : tensor<9xui32>
      %496 = stablehlo.convert %495 : (tensor<9xui32>) -> tensor<9xf32>
      %497 = stablehlo.add %iterArg_4, %496 : tensor<9xf32>
      %498 = stablehlo.negate %497 : tensor<9xf32>
      %499 = stablehlo.add %iterArg_4, %iterArg_5 : tensor<9xf32>
      %500 = stablehlo.add %499, %496 : tensor<9xf32>
      %501 = stablehlo.multiply %498, %500 : tensor<9xf32>
      %502 = stablehlo.multiply %501, %iterArg_6 : tensor<9xf32>
      %503 = stablehlo.constant dense<2.000000e+00> : tensor<f32>
      %504 = stablehlo.constant dense<2.000000e+00> : tensor<9xf32>
      %505 = stablehlo.multiply %504, %496 : tensor<9xf32>
      %506 = stablehlo.add %iterArg_4, %505 : tensor<9xf32>
      %507 = stablehlo.multiply %504, %496 : tensor<9xf32>
      %508 = stablehlo.add %iterArg_4, %507 : tensor<9xf32>
      %509 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
      %510 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
      %511 = stablehlo.add %508, %510 : tensor<9xf32>
      %512 = stablehlo.multiply %506, %511 : tensor<9xf32>
      %513 = stablehlo.divide %502, %512 : tensor<9xf32>
      %514 = stablehlo.subtract %iterArg_5, %496 : tensor<9xf32>
      %515 = stablehlo.multiply %496, %514 : tensor<9xf32>
      %516 = stablehlo.multiply %515, %iterArg_6 : tensor<9xf32>
      %517 = stablehlo.multiply %504, %496 : tensor<9xf32>
      %518 = stablehlo.add %iterArg_4, %517 : tensor<9xf32>
      %519 = stablehlo.subtract %518, %510 : tensor<9xf32>
      %520 = stablehlo.multiply %504, %496 : tensor<9xf32>
      %521 = stablehlo.add %iterArg_4, %520 : tensor<9xf32>
      %522 = stablehlo.multiply %519, %521 : tensor<9xf32>
      %523 = stablehlo.divide %516, %522 : tensor<9xf32>
      %524 = stablehlo.select %489, %513, %523 : tensor<9xi1>, tensor<9xf32>
      %525 = stablehlo.select %481, %483, %524 : tensor<9xi1>, tensor<9xf32>
      %526 = stablehlo.divide %525, %iterArg_1 : tensor<9xf32>
      %527 = stablehlo.add %477, %526 : tensor<9xf32>
      %528 = stablehlo.abs %527 : tensor<9xf32>
      %529 = stablehlo.constant dense<5.96046448E-8> : tensor<f32>
      %530 = stablehlo.constant dense<5.96046448E-8> : tensor<9xf32>
      %531 = stablehlo.compare  LT, %528, %530 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
      %532 = stablehlo.select %531, %530, %527 : tensor<9xi1>, tensor<9xf32>
      %533 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
      %534 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
      %535 = stablehlo.multiply %525, %iterArg_2 : tensor<9xf32>
      %536 = stablehlo.add %477, %535 : tensor<9xf32>
      %537 = stablehlo.abs %536 : tensor<9xf32>
      %538 = stablehlo.compare  LT, %537, %530 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
      %539 = stablehlo.select %538, %530, %536 : tensor<9xi1>, tensor<9xf32>
      %540 = stablehlo.divide %534, %539 : tensor<9xf32>
      %541 = stablehlo.multiply %532, %540 : tensor<9xf32>
      %542 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
      %543 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
      %544 = stablehlo.subtract %541, %543 : tensor<9xf32>
      %545 = stablehlo.abs %544 : tensor<9xf32>
      %546 = stablehlo.constant dense<5.96046448E-8> : tensor<f32>
      %547 = stablehlo.constant dense<5.96046448E-8> : tensor<9xf32>
      %548 = stablehlo.compare  GE, %545, %547 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
      %549 = stablehlo.constant dense<false> : tensor<i1>
      %550 = stablehlo.reduce(%548 init: %549) across dimensions = [0] : (tensor<9xi1>, tensor<i1>) -> tensor<i1>
       reducer(%arg3: tensor<i1>, %arg4: tensor<i1>)  {
        %552 = stablehlo.or %arg3, %arg4 : tensor<i1>
        stablehlo.return %552 : tensor<i1>
      }
      %551 = stablehlo.multiply %iterArg_3, %541 : tensor<9xf32>
      stablehlo.return %468, %550, %532, %540, %551, %iterArg_4, %iterArg_5, %iterArg_6 : tensor<ui32>, tensor<i1>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>, tensor<9xf32>
    }
    %38 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %39 = stablehlo.constant dense<0.000000e+00> : tensor<9xf32>
    %40 = stablehlo.compare  LE, %20, %39 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %41 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %42 = stablehlo.constant dense<0.000000e+00> : tensor<9xf32>
    %43 = stablehlo.compare  LE, %24, %42 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %44 = stablehlo.or %40, %43 : tensor<9xi1>
    %45 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %46 = stablehlo.constant dense<0.000000e+00> : tensor<9xf32>
    %47 = stablehlo.compare  LT, %19, %46 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %48 = stablehlo.or %44, %47 : tensor<9xi1>
    %49 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %50 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %51 = stablehlo.compare  GT, %19, %50 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %52 = stablehlo.or %48, %51 : tensor<9xi1>
    %53 = stablehlo.constant dense<0x7FC00000> : tensor<f32>
    %54 = stablehlo.constant dense<0x7FC00000> : tensor<9xf32>
    %55 = stablehlo.log %36 : tensor<9xf32>
    %56 = stablehlo.multiply %55, %31 : tensor<9xf32>
    %57 = stablehlo.negate %36 : tensor<9xf32>
    %58 = stablehlo.log_plus_one %57 : tensor<9xf32>
    %59 = stablehlo.multiply %58, %32 : tensor<9xf32>
    %60 = stablehlo.add %56, %59 : tensor<9xf32>
    %61 = stablehlo.abs %31 : tensor<9xf32>
    %62 = stablehlo.constant dense<0x7F800000> : tensor<f32>
    %63 = stablehlo.constant dense<0x7F800000> : tensor<9xf32>
    %64 = stablehlo.compare  EQ, %61, %63 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %65 = stablehlo.constant dense<0x7F800000> : tensor<f32>
    %66 = stablehlo.constant dense<0x7F800000> : tensor<9xf32>
    %67 = stablehlo.constant dense<5.000000e-01> : tensor<f32>
    %68 = stablehlo.constant dense<5.000000e-01> : tensor<9xf32>
    %69 = stablehlo.compare  LT, %31, %68 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %70 = stablehlo.constant dense<3.14159274> : tensor<f32>
    %71 = stablehlo.constant dense<3.14159274> : tensor<9xf32>
    %72 = stablehlo.abs %31 : tensor<9xf32>
    %73 = stablehlo.floor %72 : tensor<9xf32>
    %74 = stablehlo.subtract %72, %73 : tensor<9xf32>
    %75 = stablehlo.constant dense<5.000000e-01> : tensor<f32>
    %76 = stablehlo.constant dense<5.000000e-01> : tensor<9xf32>
    %77 = stablehlo.compare  GT, %74, %76 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %78 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %79 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %80 = stablehlo.subtract %79, %74 : tensor<9xf32>
    %81 = stablehlo.select %77, %80, %74 : tensor<9xi1>, tensor<9xf32>
    %82 = stablehlo.multiply %71, %81 : tensor<9xf32>
    %83 = stablehlo.sine %82 : tensor<9xf32>
    %84 = stablehlo.log %83 : tensor<9xf32>
    %85 = stablehlo.is_finite %84 : (tensor<9xf32>) -> tensor<9xi1>
    %86 = stablehlo.constant dense<1.14472985> : tensor<f32>
    %87 = stablehlo.constant dense<1.14472985> : tensor<9xf32>
    %88 = stablehlo.subtract %87, %84 : tensor<9xf32>
    %89 = stablehlo.constant dense<0.918938517> : tensor<f32>
    %90 = stablehlo.constant dense<0.918938517> : tensor<9xf32>
    %91 = stablehlo.negate %31 : tensor<9xf32>
    %92 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %93 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %94 = stablehlo.subtract %31, %93 : tensor<9xf32>
    %95 = stablehlo.select %69, %91, %94 : tensor<9xi1>, tensor<9xf32>
    %96 = stablehlo.constant dense<5.000000e-01> : tensor<9xf32>
    %97 = stablehlo.add %95, %96 : tensor<9xf32>
    %98 = stablehlo.constant dense<7.500000e+00> : tensor<f32>
    %99 = stablehlo.constant dense<7.500000e+00> : tensor<9xf32>
    %100 = stablehlo.add %99, %95 : tensor<9xf32>
    %101 = stablehlo.constant dense<2.01490307> : tensor<f32>
    %102 = stablehlo.constant dense<2.01490307> : tensor<9xf32>
    %103 = stablehlo.constant dense<7.500000e+00> : tensor<9xf32>
    %104 = stablehlo.divide %95, %103 : tensor<9xf32>
    %105 = stablehlo.log_plus_one %104 : tensor<9xf32>
    %106 = stablehlo.add %102, %105 : tensor<9xf32>
    %107 = stablehlo.divide %100, %106 : tensor<9xf32>
    %108 = stablehlo.subtract %97, %107 : tensor<9xf32>
    %109 = stablehlo.multiply %108, %106 : tensor<9xf32>
    %110 = stablehlo.add %90, %109 : tensor<9xf32>
    %111 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %112 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %113 = stablehlo.constant dense<676.520386> : tensor<f32>
    %114 = stablehlo.constant dense<676.520386> : tensor<9xf32>
    %115 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %116 = stablehlo.constant dense<0.000000e+00> : tensor<9xf32>
    %117 = stablehlo.add %95, %116 : tensor<9xf32>
    %118 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %119 = stablehlo.add %117, %118 : tensor<9xf32>
    %120 = stablehlo.divide %114, %119 : tensor<9xf32>
    %121 = stablehlo.add %112, %120 : tensor<9xf32>
    %122 = stablehlo.constant dense<-1259.13916> : tensor<f32>
    %123 = stablehlo.constant dense<-1259.13916> : tensor<9xf32>
    %124 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %125 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %126 = stablehlo.add %95, %125 : tensor<9xf32>
    %127 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %128 = stablehlo.add %126, %127 : tensor<9xf32>
    %129 = stablehlo.divide %123, %128 : tensor<9xf32>
    %130 = stablehlo.add %121, %129 : tensor<9xf32>
    %131 = stablehlo.constant dense<771.323425> : tensor<f32>
    %132 = stablehlo.constant dense<771.323425> : tensor<9xf32>
    %133 = stablehlo.constant dense<2.000000e+00> : tensor<f32>
    %134 = stablehlo.constant dense<2.000000e+00> : tensor<9xf32>
    %135 = stablehlo.add %95, %134 : tensor<9xf32>
    %136 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %137 = stablehlo.add %135, %136 : tensor<9xf32>
    %138 = stablehlo.divide %132, %137 : tensor<9xf32>
    %139 = stablehlo.add %130, %138 : tensor<9xf32>
    %140 = stablehlo.constant dense<-176.615036> : tensor<f32>
    %141 = stablehlo.constant dense<-176.615036> : tensor<9xf32>
    %142 = stablehlo.constant dense<3.000000e+00> : tensor<f32>
    %143 = stablehlo.constant dense<3.000000e+00> : tensor<9xf32>
    %144 = stablehlo.add %95, %143 : tensor<9xf32>
    %145 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %146 = stablehlo.add %144, %145 : tensor<9xf32>
    %147 = stablehlo.divide %141, %146 : tensor<9xf32>
    %148 = stablehlo.add %139, %147 : tensor<9xf32>
    %149 = stablehlo.constant dense<12.5073433> : tensor<f32>
    %150 = stablehlo.constant dense<12.5073433> : tensor<9xf32>
    %151 = stablehlo.constant dense<4.000000e+00> : tensor<f32>
    %152 = stablehlo.constant dense<4.000000e+00> : tensor<9xf32>
    %153 = stablehlo.add %95, %152 : tensor<9xf32>
    %154 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %155 = stablehlo.add %153, %154 : tensor<9xf32>
    %156 = stablehlo.divide %150, %155 : tensor<9xf32>
    %157 = stablehlo.add %148, %156 : tensor<9xf32>
    %158 = stablehlo.constant dense<-0.138571098> : tensor<f32>
    %159 = stablehlo.constant dense<-0.138571098> : tensor<9xf32>
    %160 = stablehlo.constant dense<5.000000e+00> : tensor<f32>
    %161 = stablehlo.constant dense<5.000000e+00> : tensor<9xf32>
    %162 = stablehlo.add %95, %161 : tensor<9xf32>
    %163 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %164 = stablehlo.add %162, %163 : tensor<9xf32>
    %165 = stablehlo.divide %159, %164 : tensor<9xf32>
    %166 = stablehlo.add %157, %165 : tensor<9xf32>
    %167 = stablehlo.constant dense<9.98436917E-6> : tensor<f32>
    %168 = stablehlo.constant dense<9.98436917E-6> : tensor<9xf32>
    %169 = stablehlo.constant dense<6.000000e+00> : tensor<f32>
    %170 = stablehlo.constant dense<6.000000e+00> : tensor<9xf32>
    %171 = stablehlo.add %95, %170 : tensor<9xf32>
    %172 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %173 = stablehlo.add %171, %172 : tensor<9xf32>
    %174 = stablehlo.divide %168, %173 : tensor<9xf32>
    %175 = stablehlo.add %166, %174 : tensor<9xf32>
    %176 = stablehlo.constant dense<1.50563267E-7> : tensor<f32>
    %177 = stablehlo.constant dense<1.50563267E-7> : tensor<9xf32>
    %178 = stablehlo.constant dense<7.000000e+00> : tensor<f32>
    %179 = stablehlo.constant dense<7.000000e+00> : tensor<9xf32>
    %180 = stablehlo.add %95, %179 : tensor<9xf32>
    %181 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %182 = stablehlo.add %180, %181 : tensor<9xf32>
    %183 = stablehlo.divide %177, %182 : tensor<9xf32>
    %184 = stablehlo.add %175, %183 : tensor<9xf32>
    %185 = stablehlo.log %184 : tensor<9xf32>
    %186 = stablehlo.add %110, %185 : tensor<9xf32>
    %187 = stablehlo.subtract %88, %186 : tensor<9xf32>
    %188 = stablehlo.negate %84 : tensor<9xf32>
    %189 = stablehlo.select %85, %187, %188 : tensor<9xi1>, tensor<9xf32>
    %190 = stablehlo.select %69, %189, %186 : tensor<9xi1>, tensor<9xf32>
    %191 = stablehlo.select %64, %66, %190 : tensor<9xi1>, tensor<9xf32>
    %192 = stablehlo.abs %32 : tensor<9xf32>
    %193 = stablehlo.constant dense<0x7F800000> : tensor<f32>
    %194 = stablehlo.constant dense<0x7F800000> : tensor<9xf32>
    %195 = stablehlo.compare  EQ, %192, %194 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %196 = stablehlo.constant dense<0x7F800000> : tensor<f32>
    %197 = stablehlo.constant dense<0x7F800000> : tensor<9xf32>
    %198 = stablehlo.constant dense<5.000000e-01> : tensor<f32>
    %199 = stablehlo.constant dense<5.000000e-01> : tensor<9xf32>
    %200 = stablehlo.compare  LT, %32, %199 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %201 = stablehlo.constant dense<3.14159274> : tensor<f32>
    %202 = stablehlo.constant dense<3.14159274> : tensor<9xf32>
    %203 = stablehlo.abs %32 : tensor<9xf32>
    %204 = stablehlo.floor %203 : tensor<9xf32>
    %205 = stablehlo.subtract %203, %204 : tensor<9xf32>
    %206 = stablehlo.constant dense<5.000000e-01> : tensor<f32>
    %207 = stablehlo.constant dense<5.000000e-01> : tensor<9xf32>
    %208 = stablehlo.compare  GT, %205, %207 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %209 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %210 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %211 = stablehlo.subtract %210, %205 : tensor<9xf32>
    %212 = stablehlo.select %208, %211, %205 : tensor<9xi1>, tensor<9xf32>
    %213 = stablehlo.multiply %202, %212 : tensor<9xf32>
    %214 = stablehlo.sine %213 : tensor<9xf32>
    %215 = stablehlo.log %214 : tensor<9xf32>
    %216 = stablehlo.is_finite %215 : (tensor<9xf32>) -> tensor<9xi1>
    %217 = stablehlo.constant dense<1.14472985> : tensor<f32>
    %218 = stablehlo.constant dense<1.14472985> : tensor<9xf32>
    %219 = stablehlo.subtract %218, %215 : tensor<9xf32>
    %220 = stablehlo.constant dense<0.918938517> : tensor<f32>
    %221 = stablehlo.constant dense<0.918938517> : tensor<9xf32>
    %222 = stablehlo.negate %32 : tensor<9xf32>
    %223 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %224 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %225 = stablehlo.subtract %32, %224 : tensor<9xf32>
    %226 = stablehlo.select %200, %222, %225 : tensor<9xi1>, tensor<9xf32>
    %227 = stablehlo.constant dense<5.000000e-01> : tensor<9xf32>
    %228 = stablehlo.add %226, %227 : tensor<9xf32>
    %229 = stablehlo.constant dense<7.500000e+00> : tensor<f32>
    %230 = stablehlo.constant dense<7.500000e+00> : tensor<9xf32>
    %231 = stablehlo.add %230, %226 : tensor<9xf32>
    %232 = stablehlo.constant dense<2.01490307> : tensor<f32>
    %233 = stablehlo.constant dense<2.01490307> : tensor<9xf32>
    %234 = stablehlo.constant dense<7.500000e+00> : tensor<9xf32>
    %235 = stablehlo.divide %226, %234 : tensor<9xf32>
    %236 = stablehlo.log_plus_one %235 : tensor<9xf32>
    %237 = stablehlo.add %233, %236 : tensor<9xf32>
    %238 = stablehlo.divide %231, %237 : tensor<9xf32>
    %239 = stablehlo.subtract %228, %238 : tensor<9xf32>
    %240 = stablehlo.multiply %239, %237 : tensor<9xf32>
    %241 = stablehlo.add %221, %240 : tensor<9xf32>
    %242 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %243 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %244 = stablehlo.constant dense<676.520386> : tensor<f32>
    %245 = stablehlo.constant dense<676.520386> : tensor<9xf32>
    %246 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %247 = stablehlo.constant dense<0.000000e+00> : tensor<9xf32>
    %248 = stablehlo.add %226, %247 : tensor<9xf32>
    %249 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %250 = stablehlo.add %248, %249 : tensor<9xf32>
    %251 = stablehlo.divide %245, %250 : tensor<9xf32>
    %252 = stablehlo.add %243, %251 : tensor<9xf32>
    %253 = stablehlo.constant dense<-1259.13916> : tensor<f32>
    %254 = stablehlo.constant dense<-1259.13916> : tensor<9xf32>
    %255 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %256 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %257 = stablehlo.add %226, %256 : tensor<9xf32>
    %258 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %259 = stablehlo.add %257, %258 : tensor<9xf32>
    %260 = stablehlo.divide %254, %259 : tensor<9xf32>
    %261 = stablehlo.add %252, %260 : tensor<9xf32>
    %262 = stablehlo.constant dense<771.323425> : tensor<f32>
    %263 = stablehlo.constant dense<771.323425> : tensor<9xf32>
    %264 = stablehlo.constant dense<2.000000e+00> : tensor<f32>
    %265 = stablehlo.constant dense<2.000000e+00> : tensor<9xf32>
    %266 = stablehlo.add %226, %265 : tensor<9xf32>
    %267 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %268 = stablehlo.add %266, %267 : tensor<9xf32>
    %269 = stablehlo.divide %263, %268 : tensor<9xf32>
    %270 = stablehlo.add %261, %269 : tensor<9xf32>
    %271 = stablehlo.constant dense<-176.615036> : tensor<f32>
    %272 = stablehlo.constant dense<-176.615036> : tensor<9xf32>
    %273 = stablehlo.constant dense<3.000000e+00> : tensor<f32>
    %274 = stablehlo.constant dense<3.000000e+00> : tensor<9xf32>
    %275 = stablehlo.add %226, %274 : tensor<9xf32>
    %276 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %277 = stablehlo.add %275, %276 : tensor<9xf32>
    %278 = stablehlo.divide %272, %277 : tensor<9xf32>
    %279 = stablehlo.add %270, %278 : tensor<9xf32>
    %280 = stablehlo.constant dense<12.5073433> : tensor<f32>
    %281 = stablehlo.constant dense<12.5073433> : tensor<9xf32>
    %282 = stablehlo.constant dense<4.000000e+00> : tensor<f32>
    %283 = stablehlo.constant dense<4.000000e+00> : tensor<9xf32>
    %284 = stablehlo.add %226, %283 : tensor<9xf32>
    %285 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %286 = stablehlo.add %284, %285 : tensor<9xf32>
    %287 = stablehlo.divide %281, %286 : tensor<9xf32>
    %288 = stablehlo.add %279, %287 : tensor<9xf32>
    %289 = stablehlo.constant dense<-0.138571098> : tensor<f32>
    %290 = stablehlo.constant dense<-0.138571098> : tensor<9xf32>
    %291 = stablehlo.constant dense<5.000000e+00> : tensor<f32>
    %292 = stablehlo.constant dense<5.000000e+00> : tensor<9xf32>
    %293 = stablehlo.add %226, %292 : tensor<9xf32>
    %294 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %295 = stablehlo.add %293, %294 : tensor<9xf32>
    %296 = stablehlo.divide %290, %295 : tensor<9xf32>
    %297 = stablehlo.add %288, %296 : tensor<9xf32>
    %298 = stablehlo.constant dense<9.98436917E-6> : tensor<f32>
    %299 = stablehlo.constant dense<9.98436917E-6> : tensor<9xf32>
    %300 = stablehlo.constant dense<6.000000e+00> : tensor<f32>
    %301 = stablehlo.constant dense<6.000000e+00> : tensor<9xf32>
    %302 = stablehlo.add %226, %301 : tensor<9xf32>
    %303 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %304 = stablehlo.add %302, %303 : tensor<9xf32>
    %305 = stablehlo.divide %299, %304 : tensor<9xf32>
    %306 = stablehlo.add %297, %305 : tensor<9xf32>
    %307 = stablehlo.constant dense<1.50563267E-7> : tensor<f32>
    %308 = stablehlo.constant dense<1.50563267E-7> : tensor<9xf32>
    %309 = stablehlo.constant dense<7.000000e+00> : tensor<f32>
    %310 = stablehlo.constant dense<7.000000e+00> : tensor<9xf32>
    %311 = stablehlo.add %226, %310 : tensor<9xf32>
    %312 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %313 = stablehlo.add %311, %312 : tensor<9xf32>
    %314 = stablehlo.divide %308, %313 : tensor<9xf32>
    %315 = stablehlo.add %306, %314 : tensor<9xf32>
    %316 = stablehlo.log %315 : tensor<9xf32>
    %317 = stablehlo.add %241, %316 : tensor<9xf32>
    %318 = stablehlo.subtract %219, %317 : tensor<9xf32>
    %319 = stablehlo.negate %215 : tensor<9xf32>
    %320 = stablehlo.select %216, %318, %319 : tensor<9xi1>, tensor<9xf32>
    %321 = stablehlo.select %200, %320, %317 : tensor<9xi1>, tensor<9xf32>
    %322 = stablehlo.select %195, %197, %321 : tensor<9xi1>, tensor<9xf32>
    %323 = stablehlo.add %191, %322 : tensor<9xf32>
    %324 = stablehlo.add %31, %32 : tensor<9xf32>
    %325 = stablehlo.abs %324 : tensor<9xf32>
    %326 = stablehlo.constant dense<0x7F800000> : tensor<f32>
    %327 = stablehlo.constant dense<0x7F800000> : tensor<9xf32>
    %328 = stablehlo.compare  EQ, %325, %327 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %329 = stablehlo.constant dense<0x7F800000> : tensor<f32>
    %330 = stablehlo.constant dense<0x7F800000> : tensor<9xf32>
    %331 = stablehlo.constant dense<5.000000e-01> : tensor<f32>
    %332 = stablehlo.constant dense<5.000000e-01> : tensor<9xf32>
    %333 = stablehlo.compare  LT, %324, %332 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %334 = stablehlo.constant dense<3.14159274> : tensor<f32>
    %335 = stablehlo.constant dense<3.14159274> : tensor<9xf32>
    %336 = stablehlo.abs %324 : tensor<9xf32>
    %337 = stablehlo.floor %336 : tensor<9xf32>
    %338 = stablehlo.subtract %336, %337 : tensor<9xf32>
    %339 = stablehlo.constant dense<5.000000e-01> : tensor<f32>
    %340 = stablehlo.constant dense<5.000000e-01> : tensor<9xf32>
    %341 = stablehlo.compare  GT, %338, %340 : (tensor<9xf32>, tensor<9xf32>) -> tensor<9xi1>
    %342 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %343 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %344 = stablehlo.subtract %343, %338 : tensor<9xf32>
    %345 = stablehlo.select %341, %344, %338 : tensor<9xi1>, tensor<9xf32>
    %346 = stablehlo.multiply %335, %345 : tensor<9xf32>
    %347 = stablehlo.sine %346 : tensor<9xf32>
    %348 = stablehlo.log %347 : tensor<9xf32>
    %349 = stablehlo.is_finite %348 : (tensor<9xf32>) -> tensor<9xi1>
    %350 = stablehlo.constant dense<1.14472985> : tensor<f32>
    %351 = stablehlo.constant dense<1.14472985> : tensor<9xf32>
    %352 = stablehlo.subtract %351, %348 : tensor<9xf32>
    %353 = stablehlo.constant dense<0.918938517> : tensor<f32>
    %354 = stablehlo.constant dense<0.918938517> : tensor<9xf32>
    %355 = stablehlo.negate %324 : tensor<9xf32>
    %356 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %357 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %358 = stablehlo.subtract %324, %357 : tensor<9xf32>
    %359 = stablehlo.select %333, %355, %358 : tensor<9xi1>, tensor<9xf32>
    %360 = stablehlo.constant dense<5.000000e-01> : tensor<9xf32>
    %361 = stablehlo.add %359, %360 : tensor<9xf32>
    %362 = stablehlo.constant dense<7.500000e+00> : tensor<f32>
    %363 = stablehlo.constant dense<7.500000e+00> : tensor<9xf32>
    %364 = stablehlo.add %363, %359 : tensor<9xf32>
    %365 = stablehlo.constant dense<2.01490307> : tensor<f32>
    %366 = stablehlo.constant dense<2.01490307> : tensor<9xf32>
    %367 = stablehlo.constant dense<7.500000e+00> : tensor<9xf32>
    %368 = stablehlo.divide %359, %367 : tensor<9xf32>
    %369 = stablehlo.log_plus_one %368 : tensor<9xf32>
    %370 = stablehlo.add %366, %369 : tensor<9xf32>
    %371 = stablehlo.divide %364, %370 : tensor<9xf32>
    %372 = stablehlo.subtract %361, %371 : tensor<9xf32>
    %373 = stablehlo.multiply %372, %370 : tensor<9xf32>
    %374 = stablehlo.add %354, %373 : tensor<9xf32>
    %375 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %376 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %377 = stablehlo.constant dense<676.520386> : tensor<f32>
    %378 = stablehlo.constant dense<676.520386> : tensor<9xf32>
    %379 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %380 = stablehlo.constant dense<0.000000e+00> : tensor<9xf32>
    %381 = stablehlo.add %359, %380 : tensor<9xf32>
    %382 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %383 = stablehlo.add %381, %382 : tensor<9xf32>
    %384 = stablehlo.divide %378, %383 : tensor<9xf32>
    %385 = stablehlo.add %376, %384 : tensor<9xf32>
    %386 = stablehlo.constant dense<-1259.13916> : tensor<f32>
    %387 = stablehlo.constant dense<-1259.13916> : tensor<9xf32>
    %388 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %389 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %390 = stablehlo.add %359, %389 : tensor<9xf32>
    %391 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %392 = stablehlo.add %390, %391 : tensor<9xf32>
    %393 = stablehlo.divide %387, %392 : tensor<9xf32>
    %394 = stablehlo.add %385, %393 : tensor<9xf32>
    %395 = stablehlo.constant dense<771.323425> : tensor<f32>
    %396 = stablehlo.constant dense<771.323425> : tensor<9xf32>
    %397 = stablehlo.constant dense<2.000000e+00> : tensor<f32>
    %398 = stablehlo.constant dense<2.000000e+00> : tensor<9xf32>
    %399 = stablehlo.add %359, %398 : tensor<9xf32>
    %400 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %401 = stablehlo.add %399, %400 : tensor<9xf32>
    %402 = stablehlo.divide %396, %401 : tensor<9xf32>
    %403 = stablehlo.add %394, %402 : tensor<9xf32>
    %404 = stablehlo.constant dense<-176.615036> : tensor<f32>
    %405 = stablehlo.constant dense<-176.615036> : tensor<9xf32>
    %406 = stablehlo.constant dense<3.000000e+00> : tensor<f32>
    %407 = stablehlo.constant dense<3.000000e+00> : tensor<9xf32>
    %408 = stablehlo.add %359, %407 : tensor<9xf32>
    %409 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %410 = stablehlo.add %408, %409 : tensor<9xf32>
    %411 = stablehlo.divide %405, %410 : tensor<9xf32>
    %412 = stablehlo.add %403, %411 : tensor<9xf32>
    %413 = stablehlo.constant dense<12.5073433> : tensor<f32>
    %414 = stablehlo.constant dense<12.5073433> : tensor<9xf32>
    %415 = stablehlo.constant dense<4.000000e+00> : tensor<f32>
    %416 = stablehlo.constant dense<4.000000e+00> : tensor<9xf32>
    %417 = stablehlo.add %359, %416 : tensor<9xf32>
    %418 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %419 = stablehlo.add %417, %418 : tensor<9xf32>
    %420 = stablehlo.divide %414, %419 : tensor<9xf32>
    %421 = stablehlo.add %412, %420 : tensor<9xf32>
    %422 = stablehlo.constant dense<-0.138571098> : tensor<f32>
    %423 = stablehlo.constant dense<-0.138571098> : tensor<9xf32>
    %424 = stablehlo.constant dense<5.000000e+00> : tensor<f32>
    %425 = stablehlo.constant dense<5.000000e+00> : tensor<9xf32>
    %426 = stablehlo.add %359, %425 : tensor<9xf32>
    %427 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %428 = stablehlo.add %426, %427 : tensor<9xf32>
    %429 = stablehlo.divide %423, %428 : tensor<9xf32>
    %430 = stablehlo.add %421, %429 : tensor<9xf32>
    %431 = stablehlo.constant dense<9.98436917E-6> : tensor<f32>
    %432 = stablehlo.constant dense<9.98436917E-6> : tensor<9xf32>
    %433 = stablehlo.constant dense<6.000000e+00> : tensor<f32>
    %434 = stablehlo.constant dense<6.000000e+00> : tensor<9xf32>
    %435 = stablehlo.add %359, %434 : tensor<9xf32>
    %436 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %437 = stablehlo.add %435, %436 : tensor<9xf32>
    %438 = stablehlo.divide %432, %437 : tensor<9xf32>
    %439 = stablehlo.add %430, %438 : tensor<9xf32>
    %440 = stablehlo.constant dense<1.50563267E-7> : tensor<f32>
    %441 = stablehlo.constant dense<1.50563267E-7> : tensor<9xf32>
    %442 = stablehlo.constant dense<7.000000e+00> : tensor<f32>
    %443 = stablehlo.constant dense<7.000000e+00> : tensor<9xf32>
    %444 = stablehlo.add %359, %443 : tensor<9xf32>
    %445 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %446 = stablehlo.add %444, %445 : tensor<9xf32>
    %447 = stablehlo.divide %441, %446 : tensor<9xf32>
    %448 = stablehlo.add %439, %447 : tensor<9xf32>
    %449 = stablehlo.log %448 : tensor<9xf32>
    %450 = stablehlo.add %374, %449 : tensor<9xf32>
    %451 = stablehlo.subtract %352, %450 : tensor<9xf32>
    %452 = stablehlo.negate %348 : tensor<9xf32>
    %453 = stablehlo.select %349, %451, %452 : tensor<9xi1>, tensor<9xf32>
    %454 = stablehlo.select %333, %453, %450 : tensor<9xi1>, tensor<9xf32>
    %455 = stablehlo.select %328, %330, %454 : tensor<9xi1>, tensor<9xf32>
    %456 = stablehlo.subtract %323, %455 : tensor<9xf32>
    %457 = stablehlo.subtract %60, %456 : tensor<9xf32>
    %458 = stablehlo.exponential %457 : tensor<9xf32>
    %459 = stablehlo.multiply %37#4, %458 : tensor<9xf32>
    %460 = stablehlo.divide %459, %31 : tensor<9xf32>
    %461 = stablehlo.select %52, %54, %460 : tensor<9xi1>, tensor<9xf32>
    %462 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %463 = stablehlo.constant dense<1.000000e+00> : tensor<9xf32>
    %464 = stablehlo.subtract %463, %461 : tensor<9xf32>
    %465 = stablehlo.select %30, %461, %464 : tensor<9xi1>, tensor<9xf32>
    %466 = stablehlo.convert %465 : (tensor<9xf32>) -> tensor<9xf16>
    return %466 : tensor<9xf16>
  }
}
