// RUN-DISABLED: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = stablehlo.constant dense<[[[0], [1]], [[2], [3]]]> : tensor<2x2x1xi32>
    %1:2 = call @inputs() : () -> (tensor<5x6x7xi16>, tensor<5x2x2x7xi16>)
    %2 = call @expected() : () -> tensor<5x6x7xi16>
    %3 = "stablehlo.scatter"(%1#0, %0, %1#1) ({
    ^bb0(%arg0: tensor<i16>, %arg1: tensor<i16>):
      %5 = stablehlo.add %arg0, %arg1 : tensor<i16>
      stablehlo.return %5 : tensor<i16>
    }) {scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [0, 3], inserted_window_dims = [1], scatter_dims_to_operand_dims = [1], index_vector_dim = 2>, unique_indices = true} : (tensor<5x6x7xi16>, tensor<2x2x1xi32>, tensor<5x2x2x7xi16>) -> tensor<5x6x7xi16>
    %4 = stablehlo.custom_call @check.eq(%3, %2) : (tensor<5x6x7xi16>, tensor<5x6x7xi16>) -> tensor<i1>
    return %4 : tensor<i1>
  }
  func.func private @inputs() -> (tensor<5x6x7xi16>, tensor<5x2x2x7xi16>) {
    %0 = stablehlo.constant dense<"0x000000000600FFFF0200FEFFFDFFFAFF0500020000000300FDFF0300FEFFFEFFFFFFFFFF0100FEFF0200040001000100FFFF010000000400FDFF0300FFFF0200FDFF0200060002000800010000000500FFFFFBFFFBFF0000FDFF0000000003000100FFFF00000300FDFF00000100FEFF0000FFFF020000000000020000000000FFFF0000000005000000FDFF05000000FEFFFEFF0000FCFF0200FFFF0300FAFFFCFFFFFFFDFF000001000200FFFFFDFF06000100FDFF000002000000FDFF06000200FEFFFEFFFEFF01000000020000000000FCFF0300FCFFFFFF03000200FFFF0100FDFF0000040000000300FFFFFFFF000003000300000002000300FEFF00000400FDFF0200FDFF010000000100FCFFFEFFFCFF0000FFFF0100000002000200FFFF000001000300FEFF020000000000FEFF00000500FFFF0500FEFFFDFFFEFF0500FFFFF9FF0000FDFFFCFF0000FFFF0400000001000000FFFF030000000000FFFF0000FFFF0200040000000100050002000200FBFF010000000100FDFFF7FFFFFF000002000400FEFFFFFFFCFFFEFF000002000200FDFF0100FEFF0000010000000600"> : tensor<5x6x7xi16>
    %1 = stablehlo.constant dense<"0x0000FEFF0200FEFFFDFFFFFF050001000000FFFF00000200FFFF0100FFFF0000FCFF01000500000000000100FCFF0000FEFF00000100FEFFFBFF02000300010000000100FFFF000004000100000001000200FEFF02000400FEFFFDFF0100FFFFFFFF0000FEFF010000000100020003000000FEFFFDFF00000000020006000000FBFF0000FFFF010002000000FBFF0000FBFF0200FDFF0000FFFF0100FDFF0200FEFF030000000100FFFF0400FFFF05000000FFFF00000100FFFFFDFF00000200040000000400FDFF0000FDFFFFFF00000100000005000000030001000200FEFF00000000020002000000FFFF0600020000000000FCFF00000000FDFF0200FFFF00000100FFFF03000200FFFF0000FFFF0500FAFF03000000"> : tensor<5x2x2x7xi16>
    return %0, %1 : tensor<5x6x7xi16>, tensor<5x2x2x7xi16>
  }
  func.func private @expected() -> tensor<5x6x7xi16> {
    %0 = stablehlo.constant dense<"0xtensor<5x6x7xi16>
    return %0 : tensor<5x6x7xi16>
  }
}

