// RUN-DISABLED: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = stablehlo.constant dense<0> : tensor<1xi32>
    %1:2 = call @inputs() : () -> (tensor<1x125xi32>, tensor<1xi32>)
    %2 = call @expected() : () -> tensor<1x125xi32>
    %3 = "stablehlo.scatter"(%1#0, %0, %1#1) ({
    ^bb0(%arg0: tensor<i32>, %arg1: tensor<i32>):
      %5 = stablehlo.add %arg0, %arg1 : tensor<i32>
      stablehlo.return %5 : tensor<i32>
    }) {scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [0], inserted_window_dims = [1], scatter_dims_to_operand_dims = [1]>, unique_indices = true} : (tensor<1x125xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1x125xi32>
    %4 = stablehlo.custom_call @check.eq(%3, %2) : (tensor<1x125xi32>, tensor<1x125xi32>) -> tensor<i1>
    return %4 : tensor<i1>
  }
  func.func private @inputs() -> (tensor<1x125xi32>, tensor<1xi32>) {
    %0 = stablehlo.constant dense<"0xtensor<1x125xi32>
    %1 = stablehlo.constant dense<0> : tensor<1xi32>
    return %0, %1 : tensor<1x125xi32>, tensor<1xi32>
  }
  func.func private @expected() -> tensor<1x125xi32> {
    %0 = stablehlo.constant dense<"0xFDFFFFFFFFFFFFFFFEFFFFFFF8FFFFFFFEFFFFFFF9FFFFFF030000000000000001000000030000000400000006000000000000000000000000000000FEFFFFFFFDFFFFFF0000000000000000FEFFFFFF00000000FCFFFFFF05000000000000000300000002000000000000000000000004000000FEFFFFFFFFFFFFFFFFFFFFFFFDFFFFFF03000000FDFFFFFF00000000FEFFFFFFFBFFFFFF00000000FEFFFFFFFDFFFFFF00000000FFFFFFFFFEFFFFFF00000000FFFFFFFFFDFFFFFFFFFFFFFF00000000FFFFFFFF020000000100000002000000FFFFFFFF01000000FEFFFFFF0200000000000000FDFFFFFF00000000FFFFFFFF0200000000000000000000000000000000000000FEFFFFFFFFFFFFFF03000000FEFFFFFF0400000000000000FEFFFFFFFBFFFFFFFEFFFFFF02000000FFFFFFFF03000000010000000500000000000000FEFFFFFF00000000000000000000000002000000030000000000000002000000FFFFFFFF02000000020000000100000005000000FDFFFFFFFFFFFFFF00000000FFFFFFFF000000000000000003000000010000000000000001000000FDFFFFFF050000000000000000000000030000000200000002000000000000000000000002000000FDFFFFFF05000000FDFFFFFFFBFFFFFFFDFFFFFFFDFFFFFF01000000FEFFFFFF0300000005000000FDFFFFFF"> : tensor<1x125xi32>
    return %0 : tensor<1x125xi32>
  }
}

