// RUN-DISABLED: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = stablehlo.constant dense<[0, 4]> : tensor<2xi32>
    %1:2 = call @inputs() : () -> (tensor<4x2x3x5xi32>, tensor<4x3xi32>)
    %2 = call @expected() : () -> tensor<4x2x3x5xi32>
    %3 = "stablehlo.scatter"(%1#0, %0, %1#1) ({
    ^bb0(%arg0: tensor<i32>, %arg1: tensor<i32>):
      %5 = stablehlo.add %arg0, %arg1 : tensor<i32>
      stablehlo.return %5 : tensor<i32>
    }) {scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [0, 1], inserted_window_dims = [1, 3], scatter_dims_to_operand_dims = [1, 3]>, unique_indices = true} : (tensor<4x2x3x5xi32>, tensor<2xi32>, tensor<4x3xi32>) -> tensor<4x2x3x5xi32>
    %4 = stablehlo.custom_call @check.eq(%3, %2) : (tensor<4x2x3x5xi32>, tensor<4x2x3x5xi32>) -> tensor<i1>
    return %4 : tensor<i1>
  }
  func.func private @inputs() -> (tensor<4x2x3x5xi32>, tensor<4x3xi32>) {
    %0 = stablehlo.constant dense<"0x01000000FBFFFFFF01000000010000000000000000000000FEFFFFFFFFFFFFFFFEFFFFFF0400000002000000FFFFFFFFFFFFFFFFFEFFFFFF00000000FFFFFFFF00000000000000000000000001000000FFFFFFFF06000000050000000600000000000000000000000000000000000000FFFFFFFFFFFFFFFF02000000FEFFFFFF01000000FBFFFFFF0000000000000000FEFFFFFF000000000200000004000000000000000200000002000000FFFFFFFF04000000FEFFFFFF0000000000000000010000000400000000000000FBFFFFFFFDFFFFFF090000000000000000000000FFFFFFFF00000000000000000400000002000000000000000000000001000000FBFFFFFFFFFFFFFF01000000FFFFFFFFFEFFFFFF00000000000000000000000004000000FEFFFFFF0100000000000000FDFFFFFFFEFFFFFFFFFFFFFF0100000000000000FCFFFFFF00000000FFFFFFFF0300000000000000030000000000000000000000000000000200000000000000FFFFFFFF00000000FCFFFFFF0100000002000000FDFFFFFF0000000001000000000000000200000002000000FFFFFFFFFDFFFFFF04000000FDFFFFFF0000000000000000FEFFFFFFFBFFFFFF00000000FFFFFFFF0000000003000000FEFFFFFF01000000010000000100000000000000"> : tensor<4x2x3x5xi32>
    %1 = stablehlo.constant dense<[[2, -5, 0], [-2, -4, 3], [5, 4, -3], [1, 0, -1]]> : tensor<4x3xi32>
    return %0, %1 : tensor<4x2x3x5xi32>, tensor<4x3xi32>
  }
  func.func private @expected() -> tensor<4x2x3x5xi32> {
    %0 = stablehlo.constant dense<"0x01000000FBFFFFFF01000000010000000200000000000000FEFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF02000000FFFFFFFFFFFFFFFFFEFFFFFF00000000FFFFFFFF00000000000000000000000001000000FFFFFFFF06000000050000000600000000000000000000000000000000000000FFFFFFFFFFFFFFFF02000000FEFFFFFF01000000FBFFFFFFFEFFFFFF00000000FEFFFFFF000000000200000000000000000000000200000002000000FFFFFFFF07000000FEFFFFFF0000000000000000010000000400000000000000FBFFFFFFFDFFFFFF090000000000000000000000FFFFFFFF0000000000000000040000000200000000000000000000000100000000000000FFFFFFFF01000000FFFFFFFFFEFFFFFF04000000000000000000000004000000FEFFFFFFFEFFFFFF00000000FDFFFFFFFEFFFFFFFFFFFFFF0100000000000000FCFFFFFF00000000FFFFFFFF0300000000000000030000000000000000000000000000000200000000000000FFFFFFFF00000000FDFFFFFF0100000002000000FDFFFFFF0000000001000000000000000200000002000000FFFFFFFFFCFFFFFF04000000FDFFFFFF0000000000000000FEFFFFFFFBFFFFFF00000000FFFFFFFF0000000003000000FEFFFFFF01000000010000000100000000000000"> : tensor<4x2x3x5xi32>
    return %0 : tensor<4x2x3x5xi32>
  }
}

