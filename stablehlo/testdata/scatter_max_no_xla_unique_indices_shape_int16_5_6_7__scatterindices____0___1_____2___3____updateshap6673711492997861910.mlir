// RUN-DISABLED: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = stablehlo.constant dense<[[[0], [1]], [[2], [3]]]> : tensor<2x2x1xi32>
    %1:2 = call @inputs() : () -> (tensor<5x6x7xi16>, tensor<5x2x2x7xi16>)
    %2 = call @expected() : () -> tensor<5x6x7xi16>
    %3 = "stablehlo.scatter"(%1#0, %0, %1#1) ({
    ^bb0(%arg0: tensor<i16>, %arg1: tensor<i16>):
      %5 = stablehlo.maximum %arg0, %arg1 : tensor<i16>
      stablehlo.return %5 : tensor<i16>
    }) {scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [0, 3], inserted_window_dims = [1], scatter_dims_to_operand_dims = [1], index_vector_dim = 2>, unique_indices = true} : (tensor<5x6x7xi16>, tensor<2x2x1xi32>, tensor<5x2x2x7xi16>) -> tensor<5x6x7xi16>
    %4 = stablehlo.custom_call @check.eq(%3, %2) : (tensor<5x6x7xi16>, tensor<5x6x7xi16>) -> tensor<i1>
    return %4 : tensor<i1>
  }
  func.func private @inputs() -> (tensor<5x6x7xi16>, tensor<5x2x2x7xi16>) {
    %0 = stablehlo.constant dense<"0xtensor<5x6x7xi16>
    %1 = stablehlo.constant dense<"0xtensor<5x2x2x7xi16>
    return %0, %1 : tensor<5x6x7xi16>, tensor<5x2x2x7xi16>
  }
  func.func private @expected() -> tensor<5x6x7xi16> {
    %0 = stablehlo.constant dense<"0x030000000100000006000000FDFF00000100FFFF00000100000004000400FEFFFFFF040004000100010005000400FEFF01000700010001000800FEFFFDFFFFFFFEFFFBFF00000300FFFFFEFF0100FFFF000000000000050005000400000000000100FFFF060004000200040001000500000001000100FEFFFFFF02000200050001000100FFFFFDFF05000200FCFF0300000000000000FFFF0300FDFF000002000300000000000700FEFF0300020002000300030002000300000000000200FEFFFFFF00000200010001000200000001000200FFFFFFFFFEFF0100000003000100FEFFFFFFFFFF000000000000F9FF0100FDFF0000FDFF02000000FDFF0300010000000400FBFF00000000020002000000000002000200030002000000FFFF02000300030003000200FFFF0300FFFF040003000300040005000000F9FF020000000000030002000200FFFF01000000FFFF0000030000000200FFFF0700000000000100020001000800FFFF02000100010004000300000000000300030004000300FFFF03000100FEFF00000000010000000200FFFF0400FCFFFEFFFFFF0000000000000000"> : tensor<5x6x7xi16>
    return %0 : tensor<5x6x7xi16>
  }
}

