// RUN-DISABLED: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = stablehlo.constant dense<32> : tensor<1xi32>
    %1:2 = call @inputs() : () -> (tensor<1x50x3xi32>, tensor<1x3xi32>)
    %2 = call @expected() : () -> tensor<1x50x3xi32>
    %3 = "stablehlo.scatter"(%1#0, %0, %1#1) ({
    ^bb0(%arg0: tensor<i32>, %arg1: tensor<i32>):
      %5 = stablehlo.minimum %arg0, %arg1 : tensor<i32>
      stablehlo.return %5 : tensor<i32>
    }) {scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [0, 1], inserted_window_dims = [1], scatter_dims_to_operand_dims = [1]>, unique_indices = true} : (tensor<1x50x3xi32>, tensor<1xi32>, tensor<1x3xi32>) -> tensor<1x50x3xi32>
    %4 = stablehlo.custom_call @check.eq(%3, %2) : (tensor<1x50x3xi32>, tensor<1x50x3xi32>) -> tensor<i1>
    return %4 : tensor<i1>
  }
  func.func private @inputs() -> (tensor<1x50x3xi32>, tensor<1x3xi32>) {
    %0 = stablehlo.constant dense<"0xFEFFFFFF050000000000000000000000020000000000000001000000FEFFFFFF010000000100000002000000FDFFFFFF04000000FFFFFFFF0200000002000000FDFFFFFFFFFFFFFF030000000300000003000000FFFFFFFF00000000FFFFFFFF0000000001000000FFFFFFFF000000000100000000000000000000000100000000000000FFFFFFFF020000000300000000000000FDFFFFFF040000000400000001000000FDFFFFFF00000000FCFFFFFFFBFFFFFF02000000FEFFFFFF00000000000000000200000001000000FFFFFFFF000000000000000005000000FEFFFFFF0100000000000000020000000200000000000000000000000000000000000000FDFFFFFF00000000FEFFFFFF00000000000000000100000003000000010000000500000004000000FFFFFFFFFEFFFFFF020000000400000002000000FFFFFFFF03000000FCFFFFFFFFFFFFFF000000000100000000000000FCFFFFFF05000000FDFFFFFFFEFFFFFFFDFFFFFFFFFFFFFF0100000000000000FEFFFFFF03000000FDFFFFFF0200000004000000000000000200000000000000FCFFFFFF01000000FFFFFFFF0200000006000000FEFFFFFF0000000000000000020000000200000000000000FBFFFFFFFBFFFFFFFFFFFFFF0200000002000000FDFFFFFF040000000100000000000000F9FFFFFF000000000000000002000000000000000A00000000000000FCFFFFFF00000000010000000000000003000000060000000000000000000000FDFFFFFFFCFFFFFF0300000000000000FAFFFFFFFDFFFFFFFEFFFFFF000000000100000001000000010000000300000001000000"> : tensor<1x50x3xi32>
    %1 = stablehlo.constant dense<[[-1, 4, -4]]> : tensor<1x3xi32>
    return %0, %1 : tensor<1x50x3xi32>, tensor<1x3xi32>
  }
  func.func private @expected() -> tensor<1x50x3xi32> {
    %0 = stablehlo.constant dense<"0xtensor<1x50x3xi32>
    return %0 : tensor<1x50x3xi32>
  }
}

