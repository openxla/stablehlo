// RUN-DISABLED: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = stablehlo.constant dense<[0, 4]> : tensor<2xi32>
    %1:2 = call @inputs() : () -> (tensor<4x2x3x5xi32>, tensor<4x3xi32>)
    %2 = call @expected() : () -> tensor<4x2x3x5xi32>
    %3 = "stablehlo.scatter"(%1#0, %0, %1#1) ({
    ^bb0(%arg0: tensor<i32>, %arg1: tensor<i32>):
      %5 = stablehlo.multiply %arg0, %arg1 : tensor<i32>
      stablehlo.return %5 : tensor<i32>
    }) {scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [0, 1], inserted_window_dims = [1, 3], scatter_dims_to_operand_dims = [1, 3]>, unique_indices = true} : (tensor<4x2x3x5xi32>, tensor<2xi32>, tensor<4x3xi32>) -> tensor<4x2x3x5xi32>
    %4 = stablehlo.custom_call @check.eq(%3, %2) : (tensor<4x2x3x5xi32>, tensor<4x2x3x5xi32>) -> tensor<i1>
    return %4 : tensor<i1>
  }
  func.func private @inputs() -> (tensor<4x2x3x5xi32>, tensor<4x3xi32>) {
    %0 = stablehlo.constant dense<"0x00000000FAFFFFFFFAFFFFFFFEFFFFFF030000000200000004000000FEFFFFFF00000000FDFFFFFFFEFFFFFF00000000FEFFFFFF04000000FFFFFFFF01000000010000000200000005000000FFFFFFFFFEFFFFFF03000000FEFFFFFF020000000000000001000000FBFFFFFFFCFFFFFF0400000001000000FFFFFFFF010000000300000000000000000000000300000008000000FFFFFFFF00000000FFFFFFFFFEFFFFFF010000000000000000000000030000000200000003000000FFFFFFFFFEFFFFFFFEFFFFFF01000000FFFFFFFF03000000FDFFFFFFFDFFFFFFFEFFFFFFFDFFFFFFFEFFFFFF00000000FEFFFFFFFFFFFFFFFEFFFFFF0900000001000000FAFFFFFF0400000002000000000000000000000006000000F7FFFFFFFEFFFFFF03000000FEFFFFFF0100000006000000FEFFFFFFFCFFFFFFFEFFFFFFFFFFFFFF0500000006000000FBFFFFFF04000000FFFFFFFFFCFFFFFF070000000000000000000000FDFFFFFFFEFFFFFF04000000FFFFFFFFFCFFFFFF030000000100000000000000000000000200000001000000FAFFFFFF0100000000000000FEFFFFFFFFFFFFFF010000000200000000000000FEFFFFFF02000000FDFFFFFFFDFFFFFF00000000FDFFFFFF00000000FDFFFFFFFFFFFFFFFDFFFFFFFEFFFFFFFCFFFFFF"> : tensor<4x2x3x5xi32>
    %1 = stablehlo.constant dense<[[0, -1, 1], [6, 3, 2], [0, 0, 1], [0, 2, 0]]> : tensor<4x3xi32>
    return %0, %1 : tensor<4x2x3x5xi32>, tensor<4x3xi32>
  }
  func.func private @expected() -> tensor<4x2x3x5xi32> {
    %0 = stablehlo.constant dense<"0xtensor<4x2x3x5xi32>
    return %0 : tensor<4x2x3x5xi32>
  }
}

