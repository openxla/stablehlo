// RUN-DISABLED: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = stablehlo.constant dense<[0, 4]> : tensor<2xi32>
    %1:2 = call @inputs() : () -> (tensor<4x2x3x5xi32>, tensor<4x3xi32>)
    %2 = call @expected() : () -> tensor<4x2x3x5xi32>
    %3 = "stablehlo.scatter"(%1#0, %0, %1#1) ({
    ^bb0(%arg0: tensor<i32>, %arg1: tensor<i32>):
      stablehlo.return %arg1 : tensor<i32>
    }) {scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [0, 1], inserted_window_dims = [1, 3], scatter_dims_to_operand_dims = [1, 3]>, unique_indices = true} : (tensor<4x2x3x5xi32>, tensor<2xi32>, tensor<4x3xi32>) -> tensor<4x2x3x5xi32>
    %4 = stablehlo.custom_call @check.eq(%3, %2) : (tensor<4x2x3x5xi32>, tensor<4x2x3x5xi32>) -> tensor<i1>
    return %4 : tensor<i1>
  }
  func.func private @inputs() -> (tensor<4x2x3x5xi32>, tensor<4x3xi32>) {
    %0 = stablehlo.constant dense<"0xtensor<4x2x3x5xi32>
    %1 = stablehlo.constant dense<[[0, 0, 0], [-3, 0, -4], [1, 3, -5], [-5, 1, 7]]> : tensor<4x3xi32>
    return %0, %1 : tensor<4x2x3x5xi32>, tensor<4x3xi32>
  }
  func.func private @expected() -> tensor<4x2x3x5xi32> {
    %0 = stablehlo.constant dense<"0x0000000001000000FFFFFFFFFFFFFFFF00000000FFFFFFFF01000000FFFFFFFF030000000000000000000000FBFFFFFF00000000FBFFFFFF00000000000000000100000000000000FFFFFFFFFEFFFFFF00000000030000000300000004000000FEFFFFFF00000000FFFFFFFF0100000003000000030000000000000002000000FCFFFFFF01000000FDFFFFFF030000000000000002000000020000000000000002000000000000000000000005000000FCFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFEFFFFFFFEFFFFFF01000000FEFFFFFF01000000FFFFFFFFFFFFFFFF00000000FFFFFFFF0300000002000000FEFFFFFF040000000200000000000000FCFFFFFF0100000000000000FEFFFFFF00000000FFFFFFFF03000000FFFFFFFFFCFFFFFF0200000000000000FBFFFFFF04000000010000000000000005000000FDFFFFFFFFFFFFFF0100000000000000FFFFFFFF0300000001000000FDFFFFFF050000000100000001000000FCFFFFFFFCFFFFFFFEFFFFFFFEFFFFFFFBFFFFFFF9FFFFFF0400000002000000FBFFFFFF0100000004000000000000000100000000000000070000000300000000000000FDFFFFFF000000000000000000000000010000000000000004000000030000000400000002000000000000000500000002000000"> : tensor<4x2x3x5xi32>
    return %0 : tensor<4x2x3x5xi32>
  }
}

