// RUN-DISABLED: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x20xbf16>
    %1 = call @expected() : () -> tensor<20x20xbf16>
    %2 = stablehlo.convert %0 : (tensor<20x20xbf16>) -> tensor<20x20xf32>
    %3 = stablehlo.constant dense<5.000000e-01> : tensor<20x20xf32>
    %4 = stablehlo.constant dense<-0.693147182> : tensor<20x20xf32>
    %5 = stablehlo.add %2, %4 : tensor<20x20xf32>
    %6 = stablehlo.exponential %5 : tensor<20x20xf32>
    %7 = stablehlo.subtract %4, %2 : tensor<20x20xf32>
    %8 = stablehlo.exponential %7 : tensor<20x20xf32>
    %9 = stablehlo.subtract %6, %8 : tensor<20x20xf32>
    %10 = stablehlo.exponential_minus_one %2 : tensor<20x20xf32>
    %11 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %12 = stablehlo.constant dense<5.000000e-01> : tensor<20x20xf32>
    %13 = stablehlo.add %10, %11 : tensor<20x20xf32>
    %14 = stablehlo.divide %10, %13 : tensor<20x20xf32>
    %15 = stablehlo.add %10, %14 : tensor<20x20xf32>
    %16 = stablehlo.multiply %12, %15 : tensor<20x20xf32>
    %17 = stablehlo.abs %2 : tensor<20x20xf32>
    %18 = stablehlo.compare  LT, %17, %11 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %19 = stablehlo.select %18, %16, %9 : tensor<20x20xi1>, tensor<20x20xf32>
    %20 = stablehlo.convert %19 : (tensor<20x20xf32>) -> tensor<20x20xbf16>
    %21 = stablehlo.custom_call @check.eq(%20, %1) : (tensor<20x20xbf16>, tensor<20x20xbf16>) -> tensor<i1>
    return %21 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x20xbf16> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xbf16>
    return %0 : tensor<20x20xbf16>
  }
  func.func private @expected() -> tensor<20x20xbf16> {
    %0 = stablehlo.constant dense<"0xED3E54BFB9BF1B41DAC188BF1E4112BE0C429DC00740ADC0D2C01F42DAC1C2404C4226BFC03E44BF96BF15427CBE8DBF6241094180400BBF34BF36C0F2409EBF943FE9BEDAC1B9C059BF0F43ECBEE93FD0BE4540DAC1E0BC12C0584055C167C2C840C23FAFC1B9C21E403DBF503F094166403FC037C017C1E53FBB3EB541C4417E422BC1E8414FC030C0EE4024401F4258C196C084C01EC02BC0A5C09942EEC014BF9D40A3422DC18241EDBD01C1953FF540284183421C3FA3C288BFDBBF674289BF90BE454086BF083FE5BF3440CE3E71C114437541473F82418CBF02404042D8C290C280BE433E5ABFC2C3223EA040F8BF3041F53FCBBF5043F8BF2B41514109405CBF373F79BF64BFA0C0903E97C39DBD334022433FC0C243DF4030C40440C8C0DAC10DBFA1BFA8BF8DC448C15AC05C3F1DC317C14440E1BFA541C5402B3F26C058402EC2D0C14FBE513F8CBED240C63FD9BFF2407E3F1BC493BF27BFE640EF3F894118403CC18040D53FB7BF96C03FC04F40F2407EBF874299C299453ABE04C203C1333DADC0A0409EBFB34224C09D3F40C2D53FB23EB03FC7BF70402DC399C04B3FC7C19D40F2C0AFBF47C0FABE983FBB3F91C06BBE4BC128C014C042408BC0CF3F9DBD82BF5FC15E436DC1E7BF01C18F3ECD3F98BF993DFAC3B8416641ABBF47BE25C120C0B94012C02A3DF6BEF542ABC0E1C129BE33BFF5C248C08F3FAD3F16BDADC13641A5BF503FACC3853F1EBF58413340094025414DC0064308BE61BF623F19C1DD3EF2C0294211C216C0E53F5340F2C07EC27C3EC7BFA541AD415FC0B640D4C18B40E343D5C070BEAD404C42C240A8C091414CBFC2C35ABF9BC014431D3C273FAFBF62C1FFC1933F463EB040D0415FC1614046428A3F37C0A84043BEB33CE3C04FBE76429D4017412841B544B43FC73F78C099C03740D2C0DA414A43F2C00D40A3C023C1CF43EDBFE9BFDF4233415B3D31BF20C48D40DF40D73F59C2D8C208C05B4130C1C23E6340733F6CC0413FAD414C40C73F4C42A6BFABBEC8C07FBE3AC282419441F8BEB340A6BF50BFFDC0953F66BED13F07C141C4E1442E4299C2FC42813F02C01A406EC269BE58BE9A3FF9BD053F8D409E3FF43EEF44"> : tensor<20x20xbf16>
    return %0 : tensor<20x20xbf16>
  }
}

