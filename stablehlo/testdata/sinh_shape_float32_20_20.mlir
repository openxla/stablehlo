// RUN: stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt -inline | stablehlo-translate --interpret
// RUN: diff <(stablehlo-translate --deserialize %s.0_9_0.bc | stablehlo-opt) <(stablehlo-opt %s)
// RUN: diff <(stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt) <(stablehlo-opt %s)

module @jit_testcase {
  func.func public @main() -> tensor<i1> {
    %0 = call @inputs() : () -> tensor<20x20xf32>
    %1 = call @expected() : () -> tensor<20x20xf32>
    %2 = stablehlo.constant dense<5.000000e-01> : tensor<20x20xf32>
    %3 = stablehlo.constant dense<-0.693147182> : tensor<20x20xf32>
    %4 = stablehlo.add %0, %3 : tensor<20x20xf32>
    %5 = stablehlo.exponential %4 : tensor<20x20xf32>
    %6 = stablehlo.subtract %3, %0 : tensor<20x20xf32>
    %7 = stablehlo.exponential %6 : tensor<20x20xf32>
    %8 = stablehlo.subtract %5, %7 : tensor<20x20xf32>
    %9 = stablehlo.exponential_minus_one %0 : tensor<20x20xf32>
    %10 = stablehlo.constant dense<1.000000e+00> : tensor<20x20xf32>
    %11 = stablehlo.constant dense<5.000000e-01> : tensor<20x20xf32>
    %12 = stablehlo.add %9, %10 : tensor<20x20xf32>
    %13 = stablehlo.divide %9, %12 : tensor<20x20xf32>
    %14 = stablehlo.add %9, %13 : tensor<20x20xf32>
    %15 = stablehlo.multiply %11, %14 : tensor<20x20xf32>
    %16 = stablehlo.abs %0 : tensor<20x20xf32>
    %17 = stablehlo.compare  LT, %16, %10 : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %18 = stablehlo.select %17, %15, %8 : tensor<20x20xi1>, tensor<20x20xf32>
    %19 = stablehlo.custom_call @check.eq(%18, %1) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<i1>
    return %19 : tensor<i1>
  }
  func.func private @inputs() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0xtensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
  func.func private @expected() -> tensor<20x20xf32> {
    %0 = stablehlo.constant dense<"0x375DBFC45DDD53C12849A4C3A80F1B42F334D6C083764AC198754EC160570DBEFE6B4FBF981B5A41A2660B4077E78BC1B70162BF2BDA633F28A080BFDD17B940D375F83E7B0765C026EAA63F92D2D13FE071D8C294BD96419C23B7C017A143BDA88E88407327CB438048C03D547F2E3FBD381940C112EFC149B1A1BF2BCDD240A2EA0EBF3B1D1B42DD534F3F5FFC8B4108505C41EB9C2F42CBD0DB3F88ED7EC0EFE311C16BE5CB3F36EFED41A86661C02D25183E9033283FDA7DA6C0BF7EE542F27FF7BF7CB684445E13CA40F1BB35C1973DA73F60DB5B42A28FD3BC8859D7BF6194F74072B335BFF8472743E74485BF12A38940BA9DE2BEB1B2C941F37BEF3D158EDF42A14C3FC20C908444B527ED3F266506BF89333342B43F0B3BF67884C0D039C8BE84E6C3BE269AF03FF2AC13C2563960C0DF185EC1E7B69E40D4486A3FAC65B8BFD199B2C07A792D4032CFF9BF71D15C3F192C56BFEC5F074380DF20C232EF4540CA05DBBE57B28C41FD8F8A3F3D52D643106FC543DF7634414F4D224237C20C41C157FDC0FD9CAD42BAE4E43F2C17BA3F05E881402FCA03C1173040435A94C6C12977A2BFBB3738C1523073C242CF98409074C23FD2ABCE3F8A8BE34342CC62BF247B17405DAB0CC3B7247DBF28D32BC1E626BE3EE98F884017768EC033011FC3DECE06BF26CE7D3E818826C0FCF978BFC8B1CD3E806094BFF55CAEC154278DC1234F60C10F1413C1DA35AD3FF7C35742426A5B4027D4B741E48DD4BF3B89DC3F3EF7A23FA83597BF7806E4BB1B6533C0A7C44AC46838143F0C4EB1C18B7E613F6970AFBF27911440C01590C08C9AF03DFECB02BF151EB6BF1ED31FC06B756BC08A7F6440AADF7CBFD9E4A9C0A350A0429D5871BF8299B744DEEDB3BEA587E2C06F8F8440F102AA40441B11412FA29CC0D9C1BA3FABC9F3BE34F7284496A7CFBFA6C1A0BD833A97C2A66459C07536263F8505CDC148C41B42A6A73540B4EFE63F4B957BBF50098B402ED5803E5BE1FEC0387D1C3F7319BFBFB0ABE5BFC38196BF538B624017FB48C0CC1491BF9725C63F1F9E8D420AB29EC1784E0A3EBACB0E3E77A4C0C1C001F73E8A6B9D3F2978ACBF887F0D3D086A00C1C266893F2CBEF040CC2F0F3FCCBFED3FEE326D40372A6DC202BAB0405CC200410FA6AC4243B8D7C119B185C0202D2B3F2EC3B73D433499C3DA1B0C401D332042C69C8DC33CD838C061DAC141511E98C30C2485413F8682BD3397C4C272975D41538D1FBFFA7391BFC3561140F2A809BEF2040042FD9B65C0461888BE451B8EC2A7CC884084EB8241CF8D56C275E96842713B7F40C53E4CBE1677EEBF1CE7FE40FCEFC9BF4FAF2242482FE1BE1A0891BF7DDD11401C3C5DC214402543687E94C0FB8E3DC2D2343C4279371940C65DC542472681C1A701B3C0346B50C01EABD3C0A19E9F408D8E3240641C37403E9972408A6861BF54F6103F4224D9C1985BE0BFBB24AF434867004052478041E1A1AEC17D8797BFF33242C1E81F3A41CC79443F6B15A8C0F6C9663FD82E8FBFA66424C1CE293242F081DA3FAF0B6D3FFA2A57BFEA3C62C17E327C3F00751EBF4C619BBF5CD547415B128F41211E73438163EDC06A8E753FFAB53C43316F9343969B1CC6C95CF13EB4C274BE49FE67BF9508B9C0409CECBF51E4E341E4F568C10616A940B5CF49C0D7A4223FB6D052439D534344D686E43E089C873F42468AC044BBC73FDAA63F4316CC39BDCC2784BFA14ABFBFFA7CA9C0A849843E1C1594BF7CA47EBFF7B48541E5652F412D2B41C08520EA40298DC9C06692EABE14EF32BF5D924343B8CE6CC1F0A8E83D2FAF2EC19F741DC0C42E7C40EECC9E41E3E48641D6476E41E662E73D0E05A540960A4E41E1303ABFEC043040C55D97BF987384C0618079C144EA60BF8E90A7C1E6732EC15C50933FCC2C86BD5896CB41874314C38E9534C0E3473D401C704D40393E1FC03B56E7C02EEF9F3FECB4CBBF26641F3E263750426C0554C1A23268BED6C4F7404AC814BFDBE20B403B91DCC1402831C1D40913407A1C6C3FAC4CCA3DBCB3A64023BD9341C41A6542336C0DC06E45EAC13A52F1BFF2F616420040A842FE14733E676F1B446ACD7B3F2DF1F4C1110D4B40B2974E3F4C24983F6E02693F7D6B253F4615F6423238903FE95D994077B5FB42E68561BE9D17C5C2EC0A8D40CF6AE63F411416424EA38940390C99BF283F73BFC015F0C13CFEA1403C8DF83F384BAD415ED629BFC894A13E"> : tensor<20x20xf32>
    return %0 : tensor<20x20xf32>
  }
}

